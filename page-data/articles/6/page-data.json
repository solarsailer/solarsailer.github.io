{"componentChunkName":"component---src-components-templates-pagination-template-js","path":"/articles/6","webpackCompilationHash":"1412f532c4656b1e243a","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"group":[{"node":{"id":"baa98fc9-93f5-59ec-a355-057f750d3f8b","frontmatter":{"path":null,"title":"Compilation by a Thousand Semicolons and Commas","date":"2015-09-27","readableDate":"27 September 2015","redirectFrom":null,"excerpt":"Something I like in most modern programming languages is that they tend to ditch semicolons completely — semicolons are a nuisance, a waste of time, a source of (easily fixable) errors, ugly and unnecessary.","excerptQuote":null},"fields":{"path":"/2015/09/semicolon-comma-programming/","slug":"/2015/09/semicolon-comma-programming/"},"html":"<p>Something I like in most modern programming languages is that they tend to ditch semicolons completely.</p>\n<p>Semicolons are a nuisance, a waste of time, a source of (easily fixable) errors, ugly and unnecessary.</p>\n<p>Compilers can easily work without them. Keeping them in old languages is, most of the time, simply a question of backward-compatibility.</p>\n<p>And that's fine, after all. In modern languages though, this is something that must be avoided. It's wrong and useless.</p>\n<p>Consider this snippet of Swift:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> greeting <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello!\"</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> optionalName <span class=\"token punctuation\">{</span>\n    greeting <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>name<span class=\"token delimiter variable\">)</span></span>\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>No semicolon.</strong> Great. Now, consider a similar snippet of Go:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>x <span class=\"token builtin\">float64</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> x <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"i\"</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprint</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">.</span><span class=\"token function\">Sqrt</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>It's pretty nice, isn't it?</p>\n<p>Go <strong>does</strong> use semicolons in its grammar. However, it's the lexer's role to add them, not the developer. <a href=\"http://zachholman.com/posts/shit-work/\">Let the machines do the shit work.</a></p>\n<p>Here's the extract from <a href=\"https://golang.org/doc/effective_go.html#semicolons\">Effective Go</a>:</p>\n<blockquote>\n<p>Like C, Go's formal grammar uses semicolons to terminate statements, but unlike in C, those semicolons do not appear in the source. Instead the lexer uses a simple rule to insert semicolons automatically as it scans, so the input text is mostly free of them.</p>\n</blockquote>\n<p>And unlike in an extremely <a href=\"http://blog.izs.me/post/2353458699/an-open-letter-to-javascript-leaders-regarding\">popular</a> <a href=\"http://mislav.uniqpath.com/2010/05/semicolons/\">language</a>, Go imposes some formatting rules to its programmers and nobody has a problem with <a href=\"http://inimino.org/~inimino/blog/javascript_semicolons\">ASI</a>.</p>\n<p>However, there's still one perfectly valid case where semicolons are not optional:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">if</span> v <span class=\"token operator\">:=</span> math<span class=\"token punctuation\">.</span><span class=\"token function\">Pow</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> v <span class=\"token operator\">&lt;</span> limit <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> v\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Between <code class=\"language-text\">math.Pow(x, n)</code> and <code class=\"language-text\">v &lt; limit</code>, you will find a semicolon. Because the two statements are on the same line, the compiler needs a semicolon to know where to end a statement and start the next one.</p>\n<p>Basically, the rule is simple:</p>\n<ul>\n<li>Do not use a semicolon when a statement ends with a newline.</li>\n<li>Use a semicolon when a statement is followed by another statement on the same line.</li>\n</ul>\n<p>That's the basic consensus in new languages.</p>\n<hr>\n<p>So, here's my question: <strong>why don't we do the same thing with commas?!</strong></p>\n<p>Let's look at the following snippet of Swift:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> test <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>As you can see, each value of the array is separated by a comma. Same rule as the semicolons: if you are on the same line, use a separator. <em>In this case, it's a comma instead of the semicolon because the semantic is different.</em> Fine.</p>\n<p>Now, let's look at the same snippet with a multi-lines notation — this example might seem contrived, but this kind of notation is clearer when the values are more complex and/or numerous:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> example <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"c\"</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>Wait. What. <strong>It's exactly like in the one-line declaration just above.</strong> Which is not surprising, because almost any language will do that.</p>\n<p>That's inconsistent though. For semicolons, we omit them when there's a newline, but here, for a comma, we do not.</p>\n<p>The correct syntax should be:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> test <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token string\">\"a\"</span>\n  <span class=\"token string\">\"b\"</span>\n  <span class=\"token string\">\"c\"</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>Simpler, prettier. And it gives a few bonuses beyond the cosmetic aspect:</p>\n<ol>\n<li>It's less error-prone.</li>\n<li>\n<p>It's more practical for versioning tool's diffs:</p>\n<p><img src=\"/images/posts/2015-09-27-diff.png\" alt=\"Diff\"></p>\n</li>\n<li>It's consistent with the semicolon behavior.</li>\n</ol>\n<p>I would apply the same rule to functions definition, maps or anything which needs commas, like I wrote in this example:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// One-line, comma.</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Or:</span>\n\n<span class=\"token comment\">// Multi-lines, no comma.</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>\n  x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span>\n  y<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In Go, those notations are not frequent because the formatting rules are stricter. However, in a struct definition, you must write this:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Point <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n  X <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span>\n  Y <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><em>(Note the trailing comma on the last line.)</em></p>\n<p>It's better than what Swift does (at least, diffs are not impacted and you don't have to think to add or remove a comma — you just have to).</p>\n<p>But why did they choose to keep the commas? No comma at all would have been way better AND coherent with the semicolon rule.</p>\n<p>And you know what is even more inconsistent? This, which is perfectly valid Go code:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span>\n  x <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n  y <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n  z <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Yep, this time, there is nothing at all.</p>"}},{"node":{"id":"bc968386-3789-5bc5-9c4c-11e79ebe7662","frontmatter":{"path":null,"title":"What Makes an Indie Hit?","date":"2015-09-18","readableDate":"18 September 2015","redirectFrom":null,"excerpt":null,"excerptQuote":null},"fields":{"path":"/2015/09/what-makes-indie-hit/","slug":"/2015/09/what-makes-indie-hit/"},"html":"<p>“<a href=\"http://www.gamasutra.com/blogs/RyanClark/20150917/253842/What_Makes_an_Indie_Hit_How_to_Choose_the_Right_Design.php\">What Makes an Indie Hit?: How to Choose the Right Design</a>” by Ryan Clark (of <a href=\"http://necrodancer.com/\">Crypt of the NecroDancer</a>) is an interesting read:</p>\n<blockquote>\n<p>In this industry it's difficult to go far without learning from others. But from whom should we learn? I think it is wisest to study developers who have been repeatedly successful. Each time a developer creates another successful game, it becomes less and less likely that their repeated successes have been due to luck. Only a minuscule fraction of indie games break even, so what are the odds of developers like Jamie Cheng, Edmund McMillen, and Cliff Harris stringing together a number of successful games? The odds are low. There must be something other than luck at work! So perhaps these folks (and many others like them!) are the ones you should be studying and listening to.</p>\n</blockquote>\n<p>I generally agree with the article (read it!), but there is one point that bothers me.</p>\n<blockquote>\n<p>If you want people to remember your game, to talk about your game, to write articles about your game, etc, it needs to have a hook. Preferably multiple hooks!</p>\n</blockquote>\n<p>Ok. This is spot on. However, and while I think that innovative games are important and crucial to explore original ideas and designs, <strong>not every game can be a new experience.</strong></p>\n<p>We need fun and excellent games in existing genres. Having brilliant roguelike, RTS, shmup, point &#x26; click, you name it… is equally important. And in this case, how do you hook people?</p>\n<p>What we wanted to do with <a href=\"http://steredenn.pixelnest.io\">Steredenn</a> (my game) is an excellent shmup-roguelike. We don't want to reinvent a genre or to experiment. We just want to make a great, fun, polished and addictive game. That's all. There's a market for a game like that — but we struggle to stand out of the crowd (and we tried many things like articles, arcade cabinet, tutorials, shows, devblog, contacts, press, etc.).</p>\n<p>If we had followed the \"hooks rule\", we would never have made Steredenn.<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup> But I truly think there's a place and an audience for this kind of games.</p>\n<p><strong>tl;dr: Should every game have a hook, a \"gimmick\", a unique twist? I don't think so.</strong></p>\n<hr>\n<p>To be fair, I want to discuss of something else:</p>\n<blockquote>\n<p>If you are unsure of the strength of your game's hooks, test them! With NecroDancer we did this by putting out a very early teaser trailer, and by demoing at PAX.</p>\n</blockquote>\n<p>\"Demoing at PAX\" is not something that everyone can afford. I'm all for the \"try your game in real as soon as possible\" mantra, but going to a big show is out of scope for almost any indie. It costs a lot just to present your game — and I don't even count the transportation, the food and hostels.</p>\n<p>When we went to Rezzed, we spent about £2000. It was close to us so the travel was very cheap.<sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup> Rezzed is also no PAX or Gamescon.</p>\n<p>With our finances, we can afford one or two big exhibitions a year, if we are lucky. I don't think we are the only one in this position. I even think that we are in a privileged situation compared to many indies.</p>\n<p>I don't want to fool myself: big shows are very important to get feedbacks, coverage and press. And this is something that many indies can't do at all. Languages, geography, finances — this is not an easy problem.</p>\n<p>And as Ryan tells us a little bit later:</p>\n<blockquote>\n<p>It is common these days for devs to downplay the importance of festivals, awards, and even of press. I disagree. Sure, accolades and reviews themselves may not drive mountains of sales, but most people need to hear about your game from numerous sources before they'll actually watch a trailer or buy the game.</p>\n</blockquote>\n<p>Exactly. :)</p>\n<p>To Ryan's credit, he's also ending his article with:</p>\n<blockquote>\n<p>I know how difficult it is to succeed as a new indie dev, and I am aware of the advantages that I have due to experience, connections, and reputation.</p>\n</blockquote>\n<p>Thanks for the tips, anyways!</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>Well, we do try a few novel ideas in Steredenn, so it's not a pure \"plain-old-game\". But the essence of the game is a direct action-packed game. That's our main focus.</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-2\">\n<p>France to England.</p>\n<a href=\"#fnref-2\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>"}},{"node":{"id":"12816b93-252e-5e88-83f8-481588e390e2","frontmatter":{"path":null,"title":"Quantum Post-Mortem","date":"2015-09-15","readableDate":"15 September 2015","redirectFrom":null,"excerpt":null,"excerptQuote":{"name":"Eric Zimmerman","quote":"My goal was that every card should feel incredibly powerful – a potential game winner in the right situation. I loved seeing my playtesters' faces grow greedy as they read the cards, astonished at how good the powers seemed to be."}},"fields":{"path":"/2015/09/quantum-post-mortem/","slug":"/2015/09/quantum-post-mortem/"},"html":"<p><a href=\"http://boardgamegeek.com/blogpost/24083/designer-diary-cruel-cruel-galaxy-or-designing-qua\">Fascinating post-mortem of Quantum, by its designer, Eric Zimmerman</a>:</p>\n<blockquote>\n<p>Quantum is a strategy game for two through four players that incorporates elements of tactics, resource management, and empire building. Players each begin the game with a small fleet of three starships on a customizable map built of modular tiles. Your goal is to expand by building Quantum Cubes on planets, along the way growing your fleet and evolving its abilities. […]</p>\n<p>Another element that opened up the possibilities of the game during this early prototyping period was the addition of special power cards. While I was working on it, I remember seeing a talk at the Game Developers Conference by Rob Pardo, one of the lead designers of World of Warcraft. According to Rob, one of the philosophies at his company Blizzard was to make the player feel overpowered. According to Rob, special abilities and power-ups should feel mighty and spectacular, rather than just being some kind of incremental stat improvement.</p>\n<p>As I started adding the advance cards to the game, I tried to have them embody this approach, especially when it came to the permanent card powers. My goal was that every card should feel incredibly powerful – a potential game winner in the right situation. I loved seeing my playtesters' faces grow greedy as they read the cards, astonished at how good the powers seemed to be.</p>\n<p>The challenge of powerful cards, of course, is balancing them. […]</p>\n<p>Designing the right mix of cards came down to good old-fashioned balancing and testing. There are a number of heuristics I tried to use in designing the cards to be balanced. For example, no card simply gives players an extra fourth action each turn; instead, some cards give you an extra action, but that action is limited, such as a free move that is only one space. There are also cards that do give you a completely open-ended extra action, but only if certain conditions are met, such as if you have more ships on the map than any other player. […]</p>\n<p> It seemed hopeless; I had designed a game with a combat system that no one wanted to use! The solution to this problem was to directly link combat to winning the game. […]</p>\n<p>One strong focus of our work was the language of Quantum: the terms in the rules, the names of the cards and units, and the other words we used in the game. In early prototypes, the titles of the advance cards were more technological: \"Ferocious\", the card that gives you a combat bonus, was originally called \"Armor\", while \"Energetic\", which gives you a movement bonus, was titled \"Propulsion\".</p>\n<p>The names of the card were clear, but they felt generic. Thinking about how to emphasize the player-as-commander, I changed the names from nouns to adjectives. Rather than describing the player's fleet, the cards now described the player. Instead of \"Fuel\", \"Evasion\", and \"Engineering\", the cards now had names like \"Brilliant\", \"Cruel\", and \"Stubborn\".</p>\n</blockquote>\n<p><a href=\"http://www.funforge.fr/US/?portfolio=quantum\">Quantum</a> is one of the best boardgames I recently played. It was unavailable for a year but I finally got my hand on the re-edition. The post-mortem shows all the history behind the game and how some concepts were found and implemented.</p>\n<p>The game is really fast, complex and deep. There's a bit of chance in the game through the roll of the dices (<em>obviously</em>), but I don't think it matters that much in the end. Your decisions are way more important than your luck.</p>"}},{"node":{"id":"f7c9fdd0-bb96-53cc-94df-227952112416","frontmatter":{"path":null,"title":"The Rule of Two","date":"2015-09-09","readableDate":"09 September 2015","redirectFrom":null,"excerpt":null,"excerptQuote":{"name":"CGP Grey","quote":"The rule of two is that two is one — and one is none."}},"fields":{"path":"/2015/09/rule-of-two/","slug":"/2015/09/rule-of-two/"},"html":"<p><a href=\"http://www.relay.fm/cortex/12\">CGP Grey</a>:</p>\n<blockquote class=\"transcript\">\n<p>The rule of two is that <mark>two is one — and one is none.</mark> This is applicable to so many things in your life. As a starting point, I often like to think of the rule of two with things that you have around the house. So, for example, if you have one roll of toilet paper, you really don't have any toilet paper. Because when that one runs out, you're in trouble. So you really need two rolls of toilet paper at all time. It's a redundancy rule, basically. It's where this comes from. […]</p>\n<p>This is one of my little pieces of advice for trying to run a life very smoothly. It's that, everything that you can possibly have two of, you should have it. Two shampoo bottles, two bottles of vitamins, two boxes of cereal, two cartons of eggs. You want duplicates of everything. And then, when you're down to one of those things, that's the sign that you need to buy the next one. In this way, you are never out, you're never out of anything. […]</p>\n<p>It's applicable to everything in your whole life, everything that's important.</p>\n</blockquote>\n<p>This is so spot on. I try to function like that, but I never put words onto this behavior. Here it is.</p>\n<p>Grey continues:</p>\n<blockquote class=\"transcript\">\n<p>Think this way with computer files: you have only one copy of that file, guess what? You have no copy of this file. I even think it's applicable to work. If you have one source of income, in many ways, it's like you have no source of income. Because if something happens with your main job, you are in lots and lots of trouble. One source of income, no source of income.</p>\n</blockquote>"}},{"node":{"id":"52197db3-5317-5263-b8a2-ba10b98908e8","frontmatter":{"path":null,"title":"Dead or Finished Libraries?","date":"2015-08-21","readableDate":"21 August 2015","redirectFrom":null,"excerpt":null,"excerptQuote":{"name":"Mark Jason Dominus","quote":"People seem to think that all software requires new features or frequent bug fixes. Apparently, the idea of software that doesn't get updated because it's finished is inconceivable."}},"fields":{"path":"/2015/08/dead-or-finished-libraries/","slug":"/2015/08/dead-or-finished-libraries/"},"html":"<p><a href=\"http://perl.plover.com/yak/12views/samples/notes.html\">Twelve Views of Mark Jason Dominus</a>:</p>\n<blockquote>\n<p>I released the Text::Template module several years ago, and it was immediately very successful. It's small, simple, fast, and it does a lot of things well. At the time, there were not yet 29 templating systems available on CPAN.</p>\n<p>Anyway, the module quickly stabilized. I would get bug reports, and they would turn out to be bugs in the module's users, not in the module; I would get feature requests, and usually it turned out that what the requester wanted was possible, or even easy, without any changes to the module. Since the module was perfect, there was no need to upload new versions of it to CPAN.</p>\n<p>But then I started to get disturbing emails. \"Hi, I notice you have not updated Text::Template for nine months. Are you still maintaining it?\" \"Hi, I notice you seem to have stopped work on Text::Template. Have you decided to abandon this approach?\" \"Hi, I was thinking of using Text::Template, but I saw it wasn't being maintained any more, so I decided to use Junk::CrappyTemplate, because I need wanted to be sure of getting support for it.\"</p>\n<p>I started wondering if maybe the thing to do was to release a new version of Text::Template every month, with no changes, but with an incremented version number. Of course, that's ridiculous. But it seems that people assume that if you don't update the module every month, it must be dead. People seem to think that all software requires new features or frequent bug fixes. Apparently, the idea of software that doesn't get updated because it's finished is inconceivable.</p>\n<p>I blame Microsoft.</p>\n</blockquote>\n<p>I must confess that I tend to look at the date of the last commit when I choose a library over another (along with other metrics, hopefully).</p>\n<p>Well, I also think that a \"perfect library\" might not exist, but the author is making a really good point in his talk.</p>\n<p>(via <a href=\"http://www.drmaciver.com/2015/08/what-if-we-had-more-finished-libraries/\">What if we had more finished libraries?</a>)</p>"}},{"node":{"id":"0591de96-46be-5f22-b74a-ad1e30c77211","frontmatter":{"path":null,"title":"The Web, the Ads and the Ad-Blockers","date":"2015-06-11","readableDate":"11 June 2015","redirectFrom":null,"excerpt":null,"excerptQuote":null},"fields":{"path":"/2015/06/ads/","slug":"/2015/06/ads/"},"html":"<p>Like almost everyone else, I don't like ads. Nevertheless, I don't use an ad-blocker either.</p>\n<p>Using the web and using an ad-blocker is hypocrite. Like it or not, it's the most widely used business model on the web. That's how most people get paid for the content you read, watch and listen <strong>for free</strong>.</p>\n<p>There're other ways to do it (affiliate links, feed sponsorships, paywalls, etc.), but the dominant model today is ads.</p>\n<p>You know what? I don't find ads particularly irritating from now on. Why? Because I find and read honest websites that respect me by not throwing huge walls of ads to my face. I avoid those ad-filled websites, because most of the time, they are simply bad. And for YouTube? I patiently wait because the great contents made there that I want to see deserve to be paid.<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup></p>\n<p>The solution is not ad-blocking. The solution is to find well-made contents which focus on the readership, not the publisher.<sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup></p>\n<hr>\n<p>Let me finish with <a href=\"https://news.ycombinator.com/item?id=9695552\">this</a>:</p>\n<blockquote>\n<p>There is a huge irony in that fact that AdBlock's function of keeping ads away from our content will eventually do the opposite. The alternative to ads alongside my content is ads inside my content.</p>\n<p>Let's face it: paywalls don't work. The alternative on the horizon is native advertising. Buzzfeed is now famously refusing to host ads. Instead they sustain themselves by publishing content that subtly supports the agenda of any company with deep enough pockets to pay for it. A viewer's ability to distinguish between native ads and regular articles is small and quickly vanishing. If separate ads stop reaching people, the path to monetization remaining is to change your content to reflect someone else's agenda.</p>\n</blockquote>\n<p>Because you cannot distinguish an ad from an article, it's even more insidious and dishonest. And this time, you won't be able to block it.</p>\n<hr>\n<h2>Update <span class=\"more\">08 June 2018</span></h2>\n<p>My view on this has changed quite a bit recently. With the explosion of ad tracking technologies and the bloat they add to any webpage, I <em>do use</em> an ad blocker now. But only with Safari, where I find it safe to use an extension like that thanks to its \"Content Blocker\" model of security (ie., no access to the page content, just many rules that match the webpage without a way to send data back).</p>\n<p>I have absolutely no trust in a company like AdBlock, and I am not willing to give them my data so easily.</p>\n<p>I do, however, unblock some specific sites. It's a shame, though.</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>Ads in apps? I pay to remove them when I can or I find better paid alternatives.</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-2\">\n<p>And if you really want to use AdBlock, <em>only block abusive websites</em>.</p>\n<a href=\"#fnref-2\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>"}},{"node":{"id":"c0935cee-ba5a-5c1f-831c-73733bf83015","frontmatter":{"path":null,"title":"Force Touch Affordance","date":"2015-06-08","readableDate":"08 June 2015","redirectFrom":null,"excerpt":"Force Touch is not discoverable.","excerptQuote":null},"fields":{"path":"/2015/06/force-touch/","slug":"/2015/06/force-touch/"},"html":"<p><a href=\"https://www.apple.com/watch/technology/#sensitive\">Force Touch</a> is an impressive piece of technology. It currently equips the Apple Watch and the new Macbooks. You press firmly on the screen and the haptic engine will register a \"deep\" press.</p>\n<p>On the Watch, I found that the feedback was not properly mapped to the press (it's a tap on your wrist, not on your finger). I didn't use the Watch a lot, but I've also found that it was sometime hard to trigger.</p>\n<p>On the new Macbooks' trackpad, the feeling is fantastic. You can push multiple times and sense the force you apply like it's real. You may not even understand that it's not a true physical button.</p>\n<p>But… <strong>Force Touch is not discoverable.</strong></p>\n<p>There is no visual clue that Force Touch is available — either on the screen or on a specific control. It's like the menu button of the old Android versions: you tap somewhere (the menu button on Android, firmly with Force Touch) and something may happen. Or not. It's confusing and it's one more hidden gesture with no affordance. It's no better than a long press if its sole purpose is to be another context menu.</p>\n<p>Indeed, on the Apple Watch, Force Touch's goal is to show a secret menu with additional actions. I understand the purpose — the screen is small and you can't fit everything on the screen. But this exact same behavior on a bigger display will have the same problem that Android had with its menu button. It's even worse than a hamburger menu, because the icon won't be there to tell you that an additional layer is present.</p>\n<p>On OS X, I found that the usage of Force Touch is better: it's not a way to show secondary actions, but just a \"deeper version\" of an action. In QuickTime, for example, you press firmly on the forward button and the video will fast forward faster for each level you reach. It's still hard to know when it's available and might result in nothing, but at least, it's consistant with its source.</p>"}},{"node":{"id":"6c4f0e1a-e0b1-5028-8ae2-954d6fb473c3","frontmatter":{"path":null,"title":"Space Odyssey","date":"2015-04-26","readableDate":"26 April 2015","redirectFrom":null,"excerpt":"I've finally convinced myself to watch “2001: A Space Odyssey”. Quick review and analysis.","excerptQuote":null},"fields":{"path":"/2015/04/space-odyssey/","slug":"/2015/04/space-odyssey/"},"html":"<p>I've finally convinced myself to watch <a href=\"http://www.imdb.com/title/tt0062622/?ref_=fn_al_tt_5\">2001: A Space Odyssey</a>.<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup></p>\n<p><strong>N.B.: If you haven't seen it, I don't think you should read what's coming. Spoilers ahead.</strong><br><br></p>\n<p>Well. I didn't <strong>love</strong> the movie (the pace is really <strong>slow</strong>, even for a movie from the sixties, and not being a fan of classical scores might not have helped). I don't mind if a film is ambiguous or doesn't explain much, but 2001 may have gone a bit too far.</p>\n<p>I get that the monoliths are alien artifacts (or an alien race). I get that David Bowman has been translated in a sort of zoo. I vaguely understood that the Star Gate is a kind of allegory about the human reproduction (there's even a foetus and an umbilical cord during this passage — and the Star Child coming back to earth can also be seen as a birth). But why? Why does an extraterrestrial race would want to improve another race? Why use monoliths? Why would they open the gate near Jupiter and not on the moon?</p>\n<p>The HAL sequence was perfectly clear however, even if they don't explain why it was malfunctioning (it doesn't matter). An interpretation talks about the duality between being a perfect computer and having to lie to the crew about the origin of the mission — this would create a paradox inside the machine. I like that idea.</p>\n<p>What, in the end, annoyed me the most were the expections I had. I always thought that the story would be phenomenal. And… it's not, really. It's pretty simple as soon as you think about it (not having explanations don't change that fact — it just wraps the movie in more mysteries). I had the same reaction after finishing Blade Runner, a few years ago.</p>\n<p>It's not the movie's fault: every awesome idea it invented has been reused everywhere since.</p>\n<hr>\n<p>I was pleasantly surprised to find that the movie does not feel that dated: the images are still beautiful and the depiction of space is really well-done (especially for its time).</p>\n<p>What I loved about the movie is some of the possible interpretations. I'm really eager to read the novel by <a href=\"http://en.wikipedia.org/wiki/2001:_A_Space_Odyssey_%28novel%29\">Arthur C. Clarke</a> to dive a bit more into the story. Especially for this theory:</p>\n<blockquote>\n<p>Arthur C. Clarke's theory of the future symbiosis of man and machine, expanded by Kubrick into what Wheat calls \"a spoofy three-evolutionary leaps scenario\": ape to man, an abortive leap from man to machine, and a final, successful leap from man to 'Star Child'.</p>\n</blockquote>\n<p>I've also found a great quote by Stanley Kubrick about intelligent life when <a href=\"http://en.wikipedia.org/wiki/Interpretations_of_2001:_A_Space_Odyssey\">I was reading articles about the movie</a>:</p>\n<blockquote>\n<p>I will say that the God concept is at the heart of 2001 but not any traditional, anthropomorphic image of God.</p>\n<p>I don't believe in any of Earth's monotheistic religions, but I do believe that one can construct an intriguing scientific definition of God, once you accept the fact that there are approximately 100 billion stars in our galaxy alone, that each star is a life-giving sun and that there are approximately 100 billion galaxies in just the visible universe. Given a planet in a stable orbit, not too hot and not too cold, and given a few billion years of chance chemical reactions created by the interaction of a sun's energy on the planet's chemicals, it's fairly certain that life in one form or another will eventually emerge.</p>\n<p>It's reasonable to assume that there must be, in fact, countless billions of such planets where biological life has arisen, and the odds of some proportion of such life developing intelligence are high.</p>\n<p>Now, the sun is by no means an old star, and its planets are mere children in cosmic age, so it seems likely that there are billions of planets in the universe not only where intelligent life is on a lower scale than man but other billions where it is approximately equal and others still where it is hundreds of thousands of millions of years in advance of us.</p>\n<p>When you think of the giant technological strides that man has made in a few millennia—less than a microsecond in the chronology of the universe—can you imagine the evolutionary development that much older life forms have taken? They may have progressed from biological species, which are fragile shells for the mind at best, into immortal machine entities—and then, over innumerable eons, they could emerge from the chrysalis of matter transformed into beings of pure energy and spirit.</p>\n<p>Their potentialities would be limitless and their intelligence ungraspable by humans.</p>\n</blockquote>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>It was one of the greatest shame of my movie culture. Especially when considering the fact that I love science-fiction books and films.</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>"}},{"node":{"id":"649a9f1d-3ed9-51ae-942c-2623c5c38761","frontmatter":{"path":null,"title":"Perspectives on Wearables","date":"2015-04-25","readableDate":"25 April 2015","redirectFrom":null,"excerpt":"I'm interested in wearables (when they are not socially awkward) because of what they might become. What they are today is just a glimpse of the potential of such devices.","excerptQuote":null},"fields":{"path":"/2015/04/wearables/","slug":"/2015/04/wearables/"},"html":"<p>For a few reasons, I'm considering whether or not I should be buying an Apple Watch.<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup></p>\n<p>For many people I know, it's another useless gadget.</p>\n<p>That's fine: most people are sceptical about new technologies, after all. It's in our nature: human doesn't like change (and new things) until it reaches a certain threshold and becomes acceptable. And to be fair, it might just be a fad.</p>\n<p>The iPhone (and other touch-based smartphones) were also considered as useless gadgets in their beginnings too — almost everybody has a smartphone now, right?<sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup></p>\n<p>But like the iPhone, there's a chance the Apple Watch will succeed and become a thing (that's a big if, but I'm still more inclined to believe it will than not).</p>\n<p><strong>For the moment, I don't think there're many usages that make a watch (or other wearable devices) truly better than a phone</strong>. Hopefully, we are only at the beginning. To understand what we can do as developers, we have to use those objects daily.</p>\n<p>That's not to say they are completely useless as of today.</p>\n<p>The usages that intrigue me the most are:<sup id=\"fnref-3\"><a href=\"#fn-3\" class=\"footnote-ref\">3</a></sup></p>\n<ul>\n<li>Maps navigation (\"quick glance, straight on, a few haptic taps, go right — bam — you're arrived!\").</li>\n<li>Services like Capitaine Train <a href=\"https://blog.capitainetrain.com/8788-apple-watch\">(with an awesome watch app design that clearly understands its support and context)</a>.</li>\n<li>Passbooks and Apple Pay (if it ever comes to France).</li>\n<li>Music and podcasts playback (with Overcast or a remote).</li>\n<li>Fitness and health.</li>\n</ul>\n<p><strong>But not notifications.</strong></p>\n<hr>\n<p>I'm a huge proponent of disabling almost all notifications.</p>\n<p>I restrict the apps that can send notifications to the bare minimum (SMS, calendar, reminders and that's most of it) because I think that notifications are a nuisance.</p>\n<p>You don't need to know when someone followed you on Instagram or Twitter. You don't need to be interrupted when you receive a mail. That's also why I'm even more aggresive against sound for notifications (I do receive my mail every hour, but <em>silently</em>). I'd rather grab my phone and act willingly on something than being always distracted.</p>\n<p>People who are flooded by notifications (like <a href=\"http://www.theverge.com/a/apple-watch-review\">tech reviewers</a>) and criticize a device because of that ARE the issue, not the device. A wearable will only make their problem worse, because they will also allow access to those nuisance to a device that is physically connected to their body. And which can tap them <strong>anytime</strong>.</p>\n<hr>\n<p>What is really making sense is to have quick pertinent contextual information available at a glance.</p>\n<p>Like, when your train is ready to leave — which platform, what seat? That's useful: you are in a urge, you walk quickly and taking your phone out of your pocket takes time and precision.</p>\n<p>Having your itinerary directions given <a href=\"http://daringfireball.net/linked/2015/04/23/apple-watch-user-guide\">to you by a few vibrations</a>? That's great too.</p>\n<p>Having a full-fledged Twitter app on your wrist? Useless. Getting your Facebook likes instantly? Useless.<sup id=\"fnref-4\"><a href=\"#fn-4\" class=\"footnote-ref\">4</a></sup></p>\n<br>\n<p>I'm interested in wearables (<a href=\"https://www.google.com/glass/\">when they are not socially awkward</a>) because of what they might become. What they are today is just a glimpse of the potential of such devices.</p>\n<p>Imagine the application in the health field: with sensors on your body, it could be really easy to know and track diseases. To go there, we need to start small. For the moment, that means a watch with an heartbeat sensor and 18 hours of battery life.</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>I probably won't, for the moment. <a href=\"http://steredenn.pixelnest.io\">Priorities</a>.</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-2\">\n<p>Benedict Evans in “<a href=\"http://ben-evans.com/benedictevans/2014/11/20/time-for-new-questions-in-mobile\">New Questions In Mobile</a>”:</p>\n<blockquote>\n<p>Across all of this, and far more important, we are now well on our way to having some 3.5bn to 4bn people on earth with a smartphone. […] For the first time ever, the tech industry is selling not just to big corporations or middle-class families but to four fifths of all the adults on earth - <strong>it is selling to people who don’t have mains electricity or running water and substitute spending on cigarettes for mobile</strong>.</p>\n</blockquote>\n<a href=\"#fnref-2\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-3\">\n<p>The watch feature is probably the less important feature of a smartwatch. It's handy like it is on a phone. But like the phone feature of a smartphone, it's not the decisive capability.</p>\n<p>  Go on people, make jokes about a watch that is only able to tell the time for a day before running out of battery. ;)</p>\n<a href=\"#fnref-3\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-4\">\n<p>But that's also true for the web or an app, to be honest.</p>\n<a href=\"#fnref-4\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>"}}],"pathPrefix":"articles","first":false,"last":false,"index":6,"pageCount":10,"additionalContext":{}}}}