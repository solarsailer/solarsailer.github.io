{"componentChunkName":"component---src-components-templates-pagination-template-js","path":"/articles/3","webpackCompilationHash":"03157cdff33857299ee6","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"group":[{"node":{"id":"acc59ab6-b91b-5b7f-92c4-ecbde514f8c9","frontmatter":{"path":null,"title":"Nice, Clear and… Secure","date":"2019-10-13","readableDate":"13 October 2019","redirectFrom":null,"excerpt":null,"excerptQuote":{"name":"Federico Viticci","quote":"For security to be effective, it needs to be used, and for good security practices to be used, they need to be nice, they need to be elegant, they need to be clear."}},"fields":{"path":"/2019/10/nice-clear-and-secure/","slug":"/2019/10/nice-clear-and-secure/"},"html":"<p><a href=\"https://www.relay.fm/connected/264/\">Federico Viticci</a>:</p>\n<blockquote class=\"transcript\">\n<p>So security, obviously, and authentication, these are complicated topics, and they are complicated to engineer, they are complicated to explain. But I think, for security to be effective, and maybe this sounds a little too simplistic but bear with me.</p>\n<p><strong>For security to be effective, it needs to be used, and for good security practices to be used, they need to be nice, they need to be elegant, they need to be clear.</strong></p>\n<p>[…]</p>\n<p>If you are a security engineer, you are gonna say \"who cares about being nice, it needs to be secure\", yes! <em>It also needs to be nice!</em> […] You need to understand that being nice is just as important as being secure, because if it's not a nice experience, people are just not gonna care and they are not gonna use it, and they are just gonna click \"OK\" and they are not gonna know what it means. So, is it really more secure… if it's not nice?</p>\n</blockquote>"}},{"node":{"id":"30201edc-fc48-55c2-8a20-568e3f9d7ac3","frontmatter":{"path":null,"title":"Software Disenchantment","date":"2019-09-29","readableDate":"29 September 2019","redirectFrom":null,"excerpt":null,"excerptQuote":{"name":"Nikita","quote":"So everything is just a pile of barely working code added on top of previously written barely working code. It keeps growing in size and complexity, diminishing any chance for a change. To have a healthy ecosystem you need to go back and revisit. You need to occasionally throw stuff away and replace it with better stuff."}},"fields":{"path":"/2019/09/software-disenchantment/","slug":"/2019/09/software-disenchantment/"},"html":"<p>Nikita in “<a href=\"https://tonsky.me/blog/disenchantment/\">Software disenchantment</a>”:</p>\n<blockquote>\n<p>So everything is just a pile of barely working code added on top of previously written barely working code. It keeps growing in size and complexity, diminishing any chance for a change.</p>\n<p>To have a healthy ecosystem you <em>need</em> to go back and revisit. You <em>need</em> to occasionally throw stuff away and replace it with better stuff.</p>\n</blockquote>\n<p><small>See also: “<a href=\"https://matthieuoger.com/2015/10/sad-state-web-deployment/\">The Sad State Of Web App Deployment</a>” and “<a href=\"https://matthieuoger.com/2015/01/something-slightly-less-terrible/\">Something Slightly Less Terrible</a>”.</small></p>\n<hr>\n<p>I think the article is a bit short-sighted, and even wrong on some points: there's a difference between today's software and the one from 10 or 15 years ago — we <strong>do</strong> have progress. <em>But the overall sentiment is fundamentally correct.</em></p>\n<p>Something is broken, and that's probably because we are <a href=\"https://matthieuoger.com/2019/09/what-will-happen-to-code/\">still using code to build software</a>.</p>\n<p>There's also a slight contradiction when he says we need to delete code, but still need to be able to run things from twenty years ago. If we were more thoughtful with what we build, it could be possible, but to keep a sane and manageable codebase in our current world, we need to accept that we will lose compatibility and devices over time.<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup></p>\n<hr>\n<blockquote>\n<p>That is not engineering. That’s just lazy programming. Engineering is understanding performance, structure, limits of what you build, deeply. Combining poorly written stuff with more poorly written stuff goes strictly against that. To progress, we need to understand what and why are we doing.</p>\n</blockquote>\n<p>I'm also guilty of that. Look, this website uses <a href=\"https://www.gatsbyjs.org\">Gatsby</a> to generate a few static pages, and this requires 242M of dependencies to build it (not run it, hopefully).</p>\n<p>However, the result is extremely fast and satisfying for the user, and the developer experience is top-notch, at the expense of an increase in size of the exported bundle on initial (and uncached) load. Is this a reasonable tradeoff?</p>\n<hr>\n<p>At the end:</p>\n<blockquote>\n<p>Business won’t care. Neither will users. They are only learned to expect what we can provide. We (engineers) say every Android app takes 350 MB? Ok, they’ll live with that. We say we can’t give them smooth scrolling? Ok, they’ll live with a phone that stutter. We say “if it doesn’t work, reboot”? They’ll reboot. After all, they have no choice.</p>\n<p>There’s no competition either. Everybody is building the same slow, bloated, unreliable products. Occasional jump forward in quality does bring competitive advantage (iPhone/iOS vs other smartphones, Chrome vs other browsers) and forces everybody to regroup, but not for long.</p>\n<p>So it’s our mission as engineers to show the world what’s possible with today’s computers in terms of performance, reliability, quality, usability. If we care, people will learn. And there’s nobody but us to show them that it’s very much possible. If only we care.</p>\n</blockquote>\n<p>On this, I don't completely agree. Yes, in general, people are mostly stuck with what we provide, but users are way too forgiving, and most of the time, don't even see the quality problem<sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup> — only a fraction perceives it.<sup id=\"fnref-3\"><a href=\"#fn-3\" class=\"footnote-ref\">3</a></sup> Even engineers working on products don't necessarily see that something's wrong. How many engineers don't care about design, visual consistency, coherence, and speed, for example?<sup id=\"fnref-4\"><a href=\"#fn-4\" class=\"footnote-ref\">4</a></sup> How many don't see that their users are struggling?</p>\n<p>But there's a choice to be made by users: choose carefully, invest and learn, accept to spend a bit more on something better and more durable, change less often, and don't restrict yourself to the most ugly and cheap solution all the time, just because that was the first and easy choice.</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>That's a shame and such a waste, though. I don't know if we can do better with our current tools.</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-2\">\n<p>Case in point: Windows is still a complete mess — the average bar of software quality on this platform is abysmal, and most people are completely okay with that — they don't even care. The only thing that raised the bar on Windows is Electron apps, and these came with their own set of tradeoffs, and are almost universally considered as subpar and second-tier citizens on other OSes. <em>It's a vicious cycle: if the platform owner doesn't care, the developers won't care, thus the users too.</em></p>\n<a href=\"#fnref-2\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-3\">\n<p>This, though, poses another question: should we care about high quality if it doesn't matter for 80% of the users? I do think we should and I'm happy we still have craftsmanship in this world, but maybe it's only us, designers and nerds, that spend too much time pondering about that.</p>\n<a href=\"#fnref-3\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-4\">\n<p>And it's a bit easy to say this without knowing the business constraints. Our society pushes for fast at the expense of doing things right and correctly — by <em>taking the time</em>. This gives us progress at an incredible and ruthless pace, but also a ton of waste.</p>\n<a href=\"#fnref-4\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>"}},{"node":{"id":"22f397b7-585b-5dbe-a771-d9b96087a79a","frontmatter":{"path":null,"title":"The Passing of Time, Caught in a Single Photo","date":"2019-09-23","readableDate":"23 September 2019","redirectFrom":null,"excerpt":null,"excerptQuote":{"name":"Stephen Wilkes","quote":"I build a photograph based on time. […] I realised that Day to Night is really a new way of seeing."}},"fields":{"path":"/2019/09/passing-of-time-in-a-photo/","slug":"/2019/09/passing-of-time-in-a-photo/"},"html":"<p>Stephen Wilkes in “<a href=\"https://youtu.be/afev0ZjAhUA\">The Passing of Time, Caught in a Single Photo</a>”:</p>\n<blockquote class=\"transcript\">\n<p>Einstein described time as a fabric. Think of the surface of a trampoline: it warps and stretches with gravity.</p>\n<p>I see time as a fabric as well, except I take that fabric and flatten it, compress it into a single plane. One of the unique aspects of this work is also, if you look at all my pictures, the time vector changes: sometimes I'll go left to right, sometimes front to back, up or down, even diagonally. I am exploring the space-time continuum within a two-dimensional still photograph.</p>\n<p>[…] I build a photograph based on time. […]</p>\n<p>I'm compressing the day and night as I saw it, creating a unique harmony between these two very discordant worlds.</p>\n<p>[…] Time is this extraordinary thing that we never can really wrap our heads around. But in a very unique and special way, I believe these photographs begin to put a face on time. They embody a new metaphysical visual reality. […]</p>\n<p><strong>I realised that Day to Night is really a new way of seeing.</strong></p>\n</blockquote>\n<hr>\n<blockquote class=\"transcript\">\n<p>I watched over 15 hours all these people not even look at Sacré-Coeur. They were more interested in using it as a backdrop. They would walk up, take a picture, and then walk away. And I found this to be an absolutely extraordinary example, a powerful disconnect between what we think the human experience is versus what the human experience is evolving into. <em>The act of sharing has suddenly become more important than the experience itself.</em></p>\n</blockquote>\n<hr>\n<blockquote class=\"transcript\">\n<p>[Near a watering hole in the Serengeti National Park in Tanzania] What I witnessed was unimaginable. Frankly, it was biblical. We saw, for 26 hours, all these competitive species share a single resource called water. The same resource that humanity is supposed to have wars over during the next 50 years. The animals never even grunted at each other. <em>They seem to understand something that we humans don't.</em> That this precious resource called water is something we all have <strong>to share</strong>.</p>\n</blockquote>"}},{"node":{"id":"f60a82b4-b879-5aab-9e57-7bd9d48522ca","frontmatter":{"path":null,"title":"What Will Happen to Code?","date":"2019-09-08","readableDate":"08 September 2019","redirectFrom":null,"excerpt":"Programmers are probably the only one that are actually eagerly trying to create the next-generation of tools that will replace them.","excerptQuote":null},"fields":{"path":"/2019/09/what-will-happen-to-code/","slug":"/2019/09/what-will-happen-to-code/"},"html":"<p>Pieter Levels in “<a href=\"https://levels.io/no-code/\">No Code</a>”:</p>\n<blockquote>\n<p>In the future writing actual code will be like using a pro DSLR camera, and no code will be like using a smartphone camera. Some pros will keep doing work with DSLRs (and need them), but most basic apps will be built with no code.</p>\n<p>[…]</p>\n<p>I think we'll see coding go in two directions:</p>\n<ol>\n<li>towards simplicity with no code, for 95-99% of apps</li>\n<li>towards complexity with custom high-level engineered code, for the 1-5% of apps</li>\n</ol>\n<p>The engineers working on (2) will be high paid, in the millions/year, because custom code.</p>\n</blockquote>\n<p>This is my theory as well. I'm pretty confident that in 20, maybe 40 years, nobody will write actual code for most use cases. We will still have craftsmen, that will build low-level libraries, OSes and computing bricks, then integrated by platforms that everybody will use. Gluing, mixing and combining APIs, UIs, sensors and any other tool will be as simple as piping commands in a shell for a developer today.</p>\n<p>Nowadays' coding is too dangerous, brittle, slow and painful to continue like that forever. It's still baffle me that forgetting brackets around a <code class=\"language-text\">if</code> statement can produce an extremely serious vulnerability issue, that can potentially impact everyone on earth.</p>\n<p>As long as we write code like we did 50 years ago, this will continue to be true. We will continue to make the same mistakes, we will continue to create bugs just by calling an API or rendering a few graphical elements on a screen. It's no wonder that the average quality of softwares is so low right now: <a href=\"https://matthieuoger.com/2015/01/something-slightly-less-terrible/\">considering the number of layers you have to take into account</a>, the pace of the industry, the requirements and the variety of environments, it's already impressive that humanity was able to go this far with such a primitive tooling — it's a giant effort and a long struggle to be able to create something of quality in the software virtual world.</p>\n<p>Surprisingly, and maybe hopefully, programmers are probably the only one that are actually eagerly trying to create the next-generation of tools that will replace them.</p>\n<p>It's been a long time that I've formed this opinion in my head, and these are the reasons that I choose to not focus entirely on programming for the last years, but instead on the products at a higher level.</p>\n<p>Software engineers will probably become like blacksmiths (or similar professions): a few are highly valued for <a href=\"https://youtu.be/TD2XGwmRJi8\">the quality of their work, and the dedication to their craft</a>, but the other 99% have vanished or been replaced by low-wage jobs.</p>"}},{"node":{"id":"2599cd11-3647-545e-b164-558ab0306dd3","frontmatter":{"path":null,"title":"Art of Lists","date":"2019-08-26","readableDate":"26 August 2019","redirectFrom":null,"excerpt":null,"excerptQuote":{"name":"Allen Pike","quote":"Occasionally we need to write something that must be understood, absorbed, and acted on. […] There is one core approach […], one workhorse of the skimmable document, that is worth mastering: lists."}},"fields":{"path":"/2019/08/art-of-lists/","slug":"/2019/08/art-of-lists/"},"html":"<p><a href=\"https://allenpike.com/2019/making-a-list-bold\">Allen Pike</a>:</p>\n<blockquote>\n<p>Occasionally we need to write something that must be understood, absorbed, and acted on. The more important it is that readers understand and act, the more time you should spend refining the writing.</p>\n<p>There are a lot of things you can do to make an email, blog post, proposal, or process document clearer. For example you can keep it short, make it engaging, or have a colleague refine it before sending it out. These can all help a lot.</p>\n<p>However, if it’s critical to you that your writing is read – especially by busy people – you need to make it skimmable.</p>\n<p>[…] There is one core approach though, one workhorse of the skimmable document, that is worth mastering: lists. […] I’d like to share one weird trick to quickly writing a clear and useful list: <a href=\"https://allenpike.com/2019/making-a-list-bold#the-bolding-trick\">The Bolding Trick</a>.</p>\n</blockquote>"}},{"node":{"id":"07858c61-028b-5a38-a14e-41ddd8afdfc5","frontmatter":{"path":null,"title":"Fast","date":"2019-08-01","readableDate":"01 August 2019","redirectFrom":null,"excerpt":null,"excerptQuote":{"name":"Craig Mod","quote":"I love fast software. That is, software speedy both in function and interface. […] To me, speedy software is the difference between an application smoothly integrating into your life, and one called upon with great reluctance. […] Ultimately, to be fast is to be light."}},"fields":{"path":"/2019/08/fast/","slug":"/2019/08/fast/"},"html":"<p>Craig Mod in “<a href=\"https://craigmod.com/essays/fast_software/\">Fast Software, the Best Software</a>”:</p>\n<blockquote>\n<p>I <em>love</em> fast software. That is, software speedy both in function and interface. Software with minimal to no lag between wanting to activate or manipulate something and the thing happening. Lightness.</p>\n<p>Software that’s speedy usually means it’s focused. Like a good tool, it often means that it’s simple, but that’s not necessarily true. Speed in software is probably the most valuable, least valued asset. To me, speedy software is the difference between an application smoothly integrating into your life, and one called upon with great reluctance.</p>\n<p>[…] Because — it’s not <em>quite</em> as fast. We’re talking milliseconds, but it’s enough that you <em>feel</em> the difference.</p>\n<p>[…] Still, the slowness feels indicative of unseen rot on the inside of the machine. The slowness is like an off smell. I don’t trust the application as much as I would if it didn’t slow down […]</p>\n<p>Speed and reliability are often intuited hand-in-hand. Speed can be a good proxy for general engineering quality. If an application slows down on simple tasks, then it can mean the engineers aren’t obsessive detail sticklers. Not always, but it can mean disastrous other issues lurk. I want all my craftspeople to stickle.</p>\n<p>[…] I love software that does this: Software that unbloats over time. This should be the goal of all software. The longer it’s around, the more elegant it should become. Smooth over like a river stone.</p>\n<p>[…] But why is slow bad? Fast software is not always good software, but slow software is rarely able to rise to greatness. Fast software gives the user a chance to “meld” with its toolset. That is, not break flow.</p>\n<p>[…] It feels — intuitively — that software (beyond core functionality) should aim for speed. Speed as a proxy for efficiency. […]</p>\n<p><em>Ultimately, to be fast is to be light.</em></p>\n</blockquote>\n<p>He's talking about software — where it's most perceptible —, but I think this could also be easily applied to physical objects.</p>\n<hr>\n<p>As an aparté, but similarly, Craig also wrote this sentence that I like a lot in his <a href=\"https://craigmod.com/roden/028/\">latest Roden newsletter</a>:</p>\n<blockquote>\n<p>Part of me wishes there was more of a trend in the startup world to build sustainably small, single-serving, hyper-focused, <em>culturally-impactful</em> businesses.</p>\n</blockquote>\n<hr>\n<h2>Update <span class=\"more\">28 August 2019</span></h2>\n<p>Related to this topic, <a href=\"https://overcast.fm/+R7DVyEUt0/1:37:42\">John Siracusa</a> in <a href=\"https://atp.fm/episodes/337\">episode #337 of ATP</a>:</p>\n<blockquote class=\"transcript\">\n<p>That's what I want. I don't want to be waiting for the computer for things that I shouldn't have to be waiting for the computer for. For small interactive things. That involves, like, it's not saying \"oh yes, eliminate animations because it takes too long\". I just want everything to be interactive… all the time.</p>\n<p>I want it to be responsive to my input.</p>\n</blockquote>\n<p>This really is the crux of the problem. As soon as you start your actions and you have to stop because the software is not able to follow you, it's over (exhibit A: Jira, or as <a href=\"/sounds/posts/2019-08-01-fast/jira.mp3\">John's co-host says…</a>).</p>"}},{"node":{"id":"4e80368f-5a46-53ee-afb8-d81a1d19657c","frontmatter":{"path":null,"title":"It Doesn't Have to Be Crazy at Work","date":"2019-07-30","readableDate":"30 July 2019","redirectFrom":null,"excerpt":"Random highlights taken from the book “It Doesn't Have to Be Crazy at Work” by Basecamp.","excerptQuote":null},"fields":{"path":"/2019/07/book-basecamp/","slug":"/2019/07/book-basecamp/"},"html":"<p>Random highlights taken from the book “<a href=\"https://basecamp.com/books/calm\">It Doesn't Have to Be Crazy at Work</a>” by <a href=\"https://basecamp.com\">Basecamp</a>.</p>\n<hr>\n<p>Page 176:</p>\n<blockquote>\n<p>Later is where excuses live. Later is where good intentions go to die. Later is a broken back and a bent spirit. Later says “all-nighters are temporary until we’ve got this figured out.” Unlikely. Make the change now.</p>\n</blockquote>\n<p>Page 185:</p>\n<blockquote>\n<p>Being clear about what demands excellence and what’s perfectly okay just being adequate is a great way to bring a sense of calm into your work. You’ll worry less, you’ll accept more. “That’s fine” is such a wonderfully relaxing way to work most of the time. Save the occasional scrutiny for the differentiating details that truly matter.</p>\n</blockquote>\n<p>Page 182:</p>\n<blockquote>\n<p>We’ve been practicing disagree and commit since the beginning, but it took Bezos’s letter to name the practice. Now we even use that exact term in our discussions. “I disagree, but let’s commit” is something you’ll hear at Basecamp after heated debates about specific products or strategy decisions.</p>\n<p>Companies waste an enormous amount of time and energy trying to convince everyone to agree before moving forward on something. What they’ll often get is reluctant acceptance that masks secret resentment.</p>\n</blockquote>\n<p>Page 252:</p>\n<blockquote>\n<p>Jean-Louis Gassée, who used to run Apple France, describes this situation as the choice between two tokens. When you deal with people who have trouble, you can either choose to take the token that says “It’s no big deal” or the token that says “It’s the end of the world.” Whichever token you pick, they’ll take the other.</p>\n</blockquote>\n<p>Page 20:</p>\n<blockquote>\n<p>It begins with this idea: <em>your company is a product</em>.</p>\n<p>Yes, the things you make are products (or services), but your company is the thing that makes those things. That’s why your company should be your best product. […] That, like product development, progress is achieved through iteration. If you want to make a product better, you have to keep tweaking, revising, and iterating. The same thing is true with a company.</p>\n<p>[…]</p>\n<p>But when you think of the company as a product, you ask different questions: Do people who work here know how to use the company? Is it simple? Complex? Is it obvious how it works? What’s fast about it? What’s slow about it? Are there bugs? What’s broken that we can fix quickly and what’s going to take a long time?</p>\n<p>A company is like software. It has to be usable, it has to be useful. And it probably also has bugs, places where the company crashes because of bad organizational design or cultural oversights.</p>\n<p>When you start to think about your company as a product, all sorts of new possibilities for improvement emerge. When you realize the way you work is malleable, you can start molding something new, something better.</p>\n</blockquote>"}},{"node":{"id":"931bcad4-7ae1-5b4e-a7f0-be42a6f89801","frontmatter":{"path":null,"title":"Withhold the Fun","date":"2019-07-29","readableDate":"29 July 2019","redirectFrom":null,"excerpt":null,"excerptQuote":{"name":"John Siracusa","quote":"We established before the definition of enterprise software, the people who pay for the software and select it are not the people who use it — so your software being more desirable for users means almost nothing in the enterprise."}},"fields":{"path":"/2019/07/withhold-the-fun/","slug":"/2019/07/withhold-the-fun/"},"html":"<p><a href=\"https://atp.fm/episodes/335\">John Siracusa</a>, in episode 335 of <a href=\"https://atp.fm\">ATP</a>:</p>\n<blockquote class=\"transcript\">\n<p>\"We are trying to win on quality\". And if you try to win on quality in the enterprise, that is not a winning strategy, because, we established before the definition of enterprise software, <strong>the people who pay for the software and select it are not the people who use it so your software being more desirable for users means almost nothing in the enterprise.</strong></p>\n<p>All that matters is: does it do the thing that I needed to do, does it check all the checkboxes for compliance and <em>blablabla</em> and how much does it cost?</p>\n</blockquote>\n<p><small>(Emphasis mine)</small></p>"}},{"node":{"id":"d2068abc-5984-5be7-bf4d-2b22ee0fd392","frontmatter":{"path":null,"title":"A Real Dial","date":"2019-04-13","readableDate":"13 April 2019","redirectFrom":null,"excerpt":null,"excerptQuote":{"name":"Sebastiaan De With","quote":"When you come across an article set in a superb typeface for reading, some excellent airport signage or a well designed door handle, you don’t think about it or even notice it. If anything you might just notice being happier, or simply not frustrated. That’s how you know a design is great: it disappears."}},"fields":{"path":"/2019/04/a-real-dial/","slug":"/2019/04/a-real-dial/"},"html":"<p>From “<a href=\"https://blog.halide.cam/a-spectre-retrospective-part-2-design-708c2faf801b\">A Spectre Retrospective</a>”:</p>\n<blockquote>\n<p>Remember how I talked about the exposure duration dial, and how I really wanted it to feel like a tactile control like the one you have on a camera? The delightful clickiness of it, its precision, the appearance of etched metal… Delicious. How could we possibly translate this to a digital user interface? You’d just be tapping on glass.</p>\n<p>[…] The only issue was that my big silly thumb would totally obscure the control. […]</p>\n<p>But we didn’t have to also emulate the limitations of the physical world along with its wonderful tactile qualities: this is the digital world. We can make tiny phones fly. We can use a machine brain to pick the right settings for you.</p>\n<p>We can make the dial expand gracefully as you select an exposure time.</p>\n</blockquote>\n<p>Thus:</p>\n<blockquote>\n<p>This is probably my favorite part of the interface. Everything about it feels and looks perfect; Ben’s custom spring physics, my visual design iterations, and Jelmar’s completely custom typeface we use for the numerals. Three people worked hard on this little doodad — and most users probably wouldn’t even notice the work we put into it!</p>\n<p>I would argue that’s how you know that you’ve made something well.</p>\n<p><strong>When you come across an article set in a superb typeface for reading, some excellent airport signage or a well designed door handle, you don’t think about it or even notice it. If anything you might just notice being happier, or simply not frustrated. That’s how you know a design is great: it <em>disappears</em>.</strong></p>\n</blockquote>\n<p><small>(Emphasis mine)</small></p>"}}],"pathPrefix":"articles","first":false,"last":false,"index":3,"pageCount":10,"additionalContext":{}}}}