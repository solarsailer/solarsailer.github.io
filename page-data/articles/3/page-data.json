{"componentChunkName":"component---src-components-templates-pagination-template-js","path":"/articles/3","webpackCompilationHash":"8aa720d2492219cab15d","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"group":[{"node":{"id":"922809b5-ef27-5c35-9888-c43d5f21acbf","frontmatter":{"path":null,"title":"What Will Happen to Code?","date":"2019-09-08","readableDate":"08 September 2019","redirectFrom":null,"excerpt":"Programmers are probably the only one that are actually eagerly trying to create the next-generation of tools that will replace them.","excerptQuote":null},"fields":{"path":"/2019/09/what-will-happen-to-code/","slug":"/2019/09/what-will-happen-to-code/"},"html":"<p>Pieter Levels in “<a href=\"https://levels.io/no-code/\">No Code</a>”:</p>\n<blockquote>\n<p>In the future writing actual code will be like using a pro DSLR camera, and no code will be like using a smartphone camera. Some pros will keep doing work with DSLRs (and need them), but most basic apps will be built with no code.</p>\n<p>[…]</p>\n<p>I think we'll see coding go in two directions:</p>\n<ol>\n<li>towards simplicity with no code, for 95-99% of apps</li>\n<li>towards complexity with custom high-level engineered code, for the 1-5% of apps</li>\n</ol>\n<p>The engineers working on (2) will be high paid, in the millions/year, because custom code.</p>\n</blockquote>\n<p>This is my theory as well. I'm pretty confident that in 20, maybe 40 years, nobody will write actual code for most use cases. We will still have craftsmen, that will build low-level libraries, OSes and computing bricks, then integrated by platforms that everybody will use. Gluing, mixing and combining APIs, UIs, sensors and any other tool will be as simple as piping commands in a shell for a developer today.</p>\n<p>Nowadays' coding is too dangerous, brittle, slow and painful to continue like that forever. It's still baffle me that forgetting brackets around a <code class=\"language-text\">if</code> statement can produce an extremely serious vulnerability issue, that can potentially impact everyone on earth.</p>\n<p>As long as we write code like we did 50 years ago, this will continue to be true. We will continue to make the same mistakes, we will continue to create bugs just by calling an API or rendering a few graphical elements on a screen. It's no wonder that the average quality of softwares is so low right now: <a href=\"https://matthieuoger.com/2015/01/something-slightly-less-terrible/\">considering the number of layers you have to take into account</a>, the pace of the industry, the requirements and the variety of environments, it's already impressive that humanity was able to go this far with such a primitive tooling — it's a giant effort and a long struggle to be able to create something of quality in the software virtual world.</p>\n<p>Surprisingly, and maybe hopefully, programmers are probably the only one that are actually eagerly trying to create the next-generation of tools that will replace them.</p>\n<p>It's been a long time that I've formed this opinion in my head, and these are the reasons that I choose to not focus entirely on programming for the last years, but instead on the products at a higher level.</p>\n<p>Software engineers will probably become like blacksmiths (or similar professions): a few are highly valued for <a href=\"https://youtu.be/TD2XGwmRJi8\">the quality of their work, and the dedication to their craft</a>, but the other 99% have vanished or been replaced by low-wage jobs.</p>"}},{"node":{"id":"77165f8e-7393-5df6-ad26-e79263e2d348","frontmatter":{"path":null,"title":"Art of Lists","date":"2019-08-26","readableDate":"26 August 2019","redirectFrom":null,"excerpt":null,"excerptQuote":{"name":"Allen Pike","quote":"Occasionally we need to write something that must be understood, absorbed, and acted on. […] There is one core approach […], one workhorse of the skimmable document, that is worth mastering: lists."}},"fields":{"path":"/2019/08/art-of-lists/","slug":"/2019/08/art-of-lists/"},"html":"<p><a href=\"https://allenpike.com/2019/making-a-list-bold\">Allen Pike</a>:</p>\n<blockquote>\n<p>Occasionally we need to write something that must be understood, absorbed, and acted on. The more important it is that readers understand and act, the more time you should spend refining the writing.</p>\n<p>There are a lot of things you can do to make an email, blog post, proposal, or process document clearer. For example you can keep it short, make it engaging, or have a colleague refine it before sending it out. These can all help a lot.</p>\n<p>However, if it’s critical to you that your writing is read – especially by busy people – you need to make it skimmable.</p>\n<p>[…] There is one core approach though, one workhorse of the skimmable document, that is worth mastering: lists. […] I’d like to share one weird trick to quickly writing a clear and useful list: <a href=\"https://allenpike.com/2019/making-a-list-bold#the-bolding-trick\">The Bolding Trick</a>.</p>\n</blockquote>"}},{"node":{"id":"419f497c-e2a0-54d9-a9a6-873a7dcdba63","frontmatter":{"path":null,"title":"Fast","date":"2019-08-01","readableDate":"01 August 2019","redirectFrom":null,"excerpt":null,"excerptQuote":{"name":"Craig Mod","quote":"I love fast software. That is, software speedy both in function and interface. […] To me, speedy software is the difference between an application smoothly integrating into your life, and one called upon with great reluctance. […] Ultimately, to be fast is to be light."}},"fields":{"path":"/2019/08/fast/","slug":"/2019/08/fast/"},"html":"<p>Craig Mod in “<a href=\"https://craigmod.com/essays/fast_software/\">Fast Software, the Best Software</a>”:</p>\n<blockquote>\n<p>I <em>love</em> fast software. That is, software speedy both in function and interface. Software with minimal to no lag between wanting to activate or manipulate something and the thing happening. Lightness.</p>\n<p>Software that’s speedy usually means it’s focused. Like a good tool, it often means that it’s simple, but that’s not necessarily true. Speed in software is probably the most valuable, least valued asset. To me, speedy software is the difference between an application smoothly integrating into your life, and one called upon with great reluctance.</p>\n<p>[…] Because — it’s not <em>quite</em> as fast. We’re talking milliseconds, but it’s enough that you <em>feel</em> the difference.</p>\n<p>[…] Still, the slowness feels indicative of unseen rot on the inside of the machine. The slowness is like an off smell. I don’t trust the application as much as I would if it didn’t slow down […]</p>\n<p>Speed and reliability are often intuited hand-in-hand. Speed can be a good proxy for general engineering quality. If an application slows down on simple tasks, then it can mean the engineers aren’t obsessive detail sticklers. Not always, but it can mean disastrous other issues lurk. I want all my craftspeople to stickle.</p>\n<p>[…] I love software that does this: Software that unbloats over time. This should be the goal of all software. The longer it’s around, the more elegant it should become. Smooth over like a river stone.</p>\n<p>[…] But why is slow bad? Fast software is not always good software, but slow software is rarely able to rise to greatness. Fast software gives the user a chance to “meld” with its toolset. That is, not break flow.</p>\n<p>[…] It feels — intuitively — that software (beyond core functionality) should aim for speed. Speed as a proxy for efficiency. […]</p>\n<p><em>Ultimately, to be fast is to be light.</em></p>\n</blockquote>\n<p>He's talking about software — where it's most perceptible —, but I think this could also be easily applied to physical objects.</p>\n<hr>\n<p>As an aparté, but similarly, Craig also wrote this sentence that I like a lot in his <a href=\"https://craigmod.com/roden/028/\">latest Roden newsletter</a>:</p>\n<blockquote>\n<p>Part of me wishes there was more of a trend in the startup world to build sustainably small, single-serving, hyper-focused, <em>culturally-impactful</em> businesses.</p>\n</blockquote>\n<hr>\n<h2>Update <span class=\"more\">28 August 2019</span></h2>\n<p>Related to this topic, <a href=\"https://overcast.fm/+R7DVyEUt0/1:37:42\">John Siracusa</a> in <a href=\"https://atp.fm/episodes/337\">episode #337 of ATP</a>:</p>\n<blockquote class=\"transcript\">\n<p>That's what I want. I don't want to be waiting for the computer for things that I shouldn't have to be waiting for the computer for. For small interactive things. That involves, like, it's not saying \"oh yes, eliminate animations because it takes too long\". I just want everything to be interactive… all the time.</p>\n<p>I want it to be responsive to my input.</p>\n</blockquote>\n<p>This really is the crux of the problem. As soon as you start your actions and you have to stop because the software is not able to follow you, it's over (exhibit A: Jira, or as <a href=\"/sounds/posts/2019-08-01-fast/jira.mp3\">John's co-host says…</a>).</p>"}},{"node":{"id":"92dc3152-3230-502c-9436-ff8893544cd3","frontmatter":{"path":null,"title":"It Doesn't Have to Be Crazy at Work","date":"2019-07-30","readableDate":"30 July 2019","redirectFrom":null,"excerpt":"Random highlights taken from the book “It Doesn't Have to Be Crazy at Work” by Basecamp.","excerptQuote":null},"fields":{"path":"/2019/07/book-basecamp/","slug":"/2019/07/book-basecamp/"},"html":"<p>Random highlights taken from the book “<a href=\"https://basecamp.com/books/calm\">It Doesn't Have to Be Crazy at Work</a>” by <a href=\"https://basecamp.com\">Basecamp</a>.</p>\n<hr>\n<p>Page 176:</p>\n<blockquote>\n<p>Later is where excuses live. Later is where good intentions go to die. Later is a broken back and a bent spirit. Later says “all-nighters are temporary until we’ve got this figured out.” Unlikely. Make the change now.</p>\n</blockquote>\n<p>Page 185:</p>\n<blockquote>\n<p>Being clear about what demands excellence and what’s perfectly okay just being adequate is a great way to bring a sense of calm into your work. You’ll worry less, you’ll accept more. “That’s fine” is such a wonderfully relaxing way to work most of the time. Save the occasional scrutiny for the differentiating details that truly matter.</p>\n</blockquote>\n<p>Page 182:</p>\n<blockquote>\n<p>We’ve been practicing disagree and commit since the beginning, but it took Bezos’s letter to name the practice. Now we even use that exact term in our discussions. “I disagree, but let’s commit” is something you’ll hear at Basecamp after heated debates about specific products or strategy decisions.</p>\n<p>Companies waste an enormous amount of time and energy trying to convince everyone to agree before moving forward on something. What they’ll often get is reluctant acceptance that masks secret resentment.</p>\n</blockquote>\n<p>Page 252:</p>\n<blockquote>\n<p>Jean-Louis Gassée, who used to run Apple France, describes this situation as the choice between two tokens. When you deal with people who have trouble, you can either choose to take the token that says “It’s no big deal” or the token that says “It’s the end of the world.” Whichever token you pick, they’ll take the other.</p>\n</blockquote>\n<p>Page 20:</p>\n<blockquote>\n<p>It begins with this idea: <em>your company is a product</em>.</p>\n<p>Yes, the things you make are products (or services), but your company is the thing that makes those things. That’s why your company should be your best product. […] That, like product development, progress is achieved through iteration. If you want to make a product better, you have to keep tweaking, revising, and iterating. The same thing is true with a company.</p>\n<p>[…]</p>\n<p>But when you think of the company as a product, you ask different questions: Do people who work here know how to use the company? Is it simple? Complex? Is it obvious how it works? What’s fast about it? What’s slow about it? Are there bugs? What’s broken that we can fix quickly and what’s going to take a long time?</p>\n<p>A company is like software. It has to be usable, it has to be useful. And it probably also has bugs, places where the company crashes because of bad organizational design or cultural oversights.</p>\n<p>When you start to think about your company as a product, all sorts of new possibilities for improvement emerge. When you realize the way you work is malleable, you can start molding something new, something better.</p>\n</blockquote>"}},{"node":{"id":"703aa303-3068-5f6f-a6ea-a7bdc07722f3","frontmatter":{"path":null,"title":"Withhold the Fun","date":"2019-07-29","readableDate":"29 July 2019","redirectFrom":null,"excerpt":null,"excerptQuote":{"name":"John Siracusa","quote":"We established before the definition of enterprise software, the people who pay for the software and select it are not the people who use it — so your software being more desirable for users means almost nothing in the enterprise."}},"fields":{"path":"/2019/07/withhold-the-fun/","slug":"/2019/07/withhold-the-fun/"},"html":"<p><a href=\"https://atp.fm/episodes/335\">John Siracusa</a>, in episode 335 of <a href=\"https://atp.fm\">ATP</a>:</p>\n<blockquote class=\"transcript\">\n<p>\"We are trying to win on quality\". And if you try to win on quality in the enterprise, that is not a winning strategy, because, we established before the definition of enterprise software, <strong>the people who pay for the software and select it are not the people who use it so your software being more desirable for users means almost nothing in the enterprise.</strong></p>\n<p>All that matters is: does it do the thing that I needed to do, does it check all the checkboxes for compliance and <em>blablabla</em> and how much does it cost?</p>\n</blockquote>\n<p><small>(Emphasis mine)</small></p>"}},{"node":{"id":"75fa2384-c231-5fea-b927-e245045af88f","frontmatter":{"path":null,"title":"A Real Dial","date":"2019-04-13","readableDate":"13 April 2019","redirectFrom":null,"excerpt":null,"excerptQuote":{"name":"Sebastiaan De With","quote":"When you come across an article set in a superb typeface for reading, some excellent airport signage or a well designed door handle, you don’t think about it or even notice it. If anything you might just notice being happier, or simply not frustrated. That’s how you know a design is great: it disappears."}},"fields":{"path":"/2019/04/a-real-dial/","slug":"/2019/04/a-real-dial/"},"html":"<p>From “<a href=\"https://blog.halide.cam/a-spectre-retrospective-part-2-design-708c2faf801b\">A Spectre Retrospective</a>”:</p>\n<blockquote>\n<p>Remember how I talked about the exposure duration dial, and how I really wanted it to feel like a tactile control like the one you have on a camera? The delightful clickiness of it, its precision, the appearance of etched metal… Delicious. How could we possibly translate this to a digital user interface? You’d just be tapping on glass.</p>\n<p>[…] The only issue was that my big silly thumb would totally obscure the control. […]</p>\n<p>But we didn’t have to also emulate the limitations of the physical world along with its wonderful tactile qualities: this is the digital world. We can make tiny phones fly. We can use a machine brain to pick the right settings for you.</p>\n<p>We can make the dial expand gracefully as you select an exposure time.</p>\n</blockquote>\n<p>Thus:</p>\n<blockquote>\n<p>This is probably my favorite part of the interface. Everything about it feels and looks perfect; Ben’s custom spring physics, my visual design iterations, and Jelmar’s completely custom typeface we use for the numerals. Three people worked hard on this little doodad — and most users probably wouldn’t even notice the work we put into it!</p>\n<p>I would argue that’s how you know that you’ve made something well.</p>\n<p><strong>When you come across an article set in a superb typeface for reading, some excellent airport signage or a well designed door handle, you don’t think about it or even notice it. If anything you might just notice being happier, or simply not frustrated. That’s how you know a design is great: it <em>disappears</em>.</strong></p>\n</blockquote>\n<p><small>(Emphasis mine)</small></p>"}},{"node":{"id":"33c1bfc8-adfa-553f-9b51-76aff2877c75","frontmatter":{"path":null,"title":"Better Meetups and Conferences","date":"2018-12-13","readableDate":"13 December 2018","redirectFrom":null,"excerpt":"Manage the noise, get multiple mics, have fresh air somewhere, help people talk to each other and reduce the number of attendees.","excerptQuote":null},"fields":{"path":"/2018/12/better-meetups-conferences/","slug":"/2018/12/better-meetups-conferences/"},"html":"<p>I was watching <a href=\"https://youtu.be/_9D6ZIEQalc\">this talk</a> by <a href=\"https://twitter.com/jessiechar\">Jessie Char</a> and it reminded me of some thoughts I have each time I attend a meetup or conference.</p>\n<p>I think we could improve these events with some little tweaks that would make the experience of every attendee better.</p>\n<ul>\n<li><strong>Manage the noise level</strong>. This is <em>the most important</em> thing. Noise must be low during the \"networking phase\", which means that the venue should not produce too much sound acoustically (and if it's not possible, simply reduce the number of people attending your event). People should be able to talk to each other at more than 20cm away after a talk. I can't count the number of times I approached a group, finding that I couldn't hear one single word because the room was too loud.</li>\n<li><strong>Get 3 mics</strong> at least. One for the moderator, one for the speaker (or group of speakers), and one for the audience. The audience also wants to listen to the questions. The speaker or moderator should repeat the question after hearing it anyways, but this common practice is often forgotten, unfortunately.</li>\n<li><strong>Fresh air access</strong>. This is more for conferences, since meetups are usually shorter. There's nothing worse than not being able to go outside for a few minutes every hour. Headaches and odors await otherwise.</li>\n<li><strong>Find ways to nudge people to talk to each other</strong>. There will be groups of people that know each other, so the task is, by default, harder for strangers. Give them help, find ways to make interaction more natural. It's not that hard, I think (but it depends on the venue and what your event is about). For conferences, what I like is when other activities are offered (games for examples) — it's good to have breaks. And many times you can meet new people more easily in a different setup.</li>\n<li><strong>Reduce</strong>. <strong>The</strong>. <strong>Number</strong>. <strong>Of</strong>. <strong>Attendees</strong>. I get it that organizers don't want a small number of people at their meetups or conferences. It's not as profitable and it's not as good for the press/reputation, but participants will thank you. 1) It helps people talking to each other after a talk. 2) It reduces noise. 3) It creates intimacy and makes people ask more questions to the speakers. 4) And, in fact, it reduces your cost and makes everything more manageable.</li>\n</ul>\n<p>There're many other things to do, but these are my main frustrations. For the rest, the talk linked above is excellent! :)</p>"}},{"node":{"id":"23b0e901-3eaa-5cb4-beea-316c55254ab3","frontmatter":{"path":null,"title":"Tools","date":"2018-12-05","readableDate":"05 December 2018","redirectFrom":null,"excerpt":null,"excerptQuote":{"name":"Blood, Sweat and Pixels","quote":"That's what tool are. It's how fast can you iterate."}},"fields":{"path":"/2018/12/tools/","slug":"/2018/12/tools/"},"html":"<p>From “<a href=\"https://www.goodreads.com/book/show/34376766-blood-sweat-and-pixels\">Blood, Sweat and Pixels</a>” (written by <a href=\"https://twitter.com/jasonschreier\">Jason Schreier</a>):</p>\n<blockquote>\n<p>The biggest differentiator between a studio that creates a really high-quality <em>[product]</em> and a studio that doesn't isn't the quality of the team.</p>\n<p><strong>It's their dev tools.</strong></p>\n<p>If you can take fifty shots on goal, and you're a pretty shitty hockey player, and I can only take three shots on goal and I'm Wayne Gretzky, you're probably going to do better.</p>\n<p><strong>That's what tool are. It's how fast can you iterate</strong>, how stable are they, how robust are they, how easy it is as a nontechnical artist to move a thing.</p>\n</blockquote>\n<p><small>(Emphasis mine)</small></p>"}},{"node":{"id":"4d597594-f121-5878-992c-26fff8536ed1","frontmatter":{"path":null,"title":"Flank It","date":"2018-11-26","readableDate":"26 November 2018","redirectFrom":null,"excerpt":null,"excerptQuote":{"name":"Steve Yegge","quote":"Don’t try to beat a network by making a clone with improvements. It ain’t gonna work."}},"fields":{"path":"/2018/11/flank-it/","slug":"/2018/11/flank-it/"},"html":"<p><a href=\"https://medium.com/@steve.yegge/jeff-bezos-jack-ma-and-the-quest-to-kill-ebay-bb4992dc5020\">Steve Yegge</a>:</p>\n<blockquote>\n<p>[This] one is pretty goddamn important: Don’t try to beat a network by making a clone with improvements. It ain’t gonna work. There is too much gravitational inertia in the original network; nobody is incentivized to leave it.</p>\n<p>There are some approaches that will work […]. Both approaches require you to get into an entirely different market and build a network there. You can’t beat a strong network head-on, but you can flank it.</p>\n</blockquote>"}}],"pathPrefix":"articles","first":false,"last":false,"index":3,"pageCount":9,"additionalContext":{}}}}