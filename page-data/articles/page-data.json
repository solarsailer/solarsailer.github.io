{"componentChunkName":"component---src-components-templates-pagination-template-js","path":"/articles","webpackCompilationHash":"8aa720d2492219cab15d","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"group":[{"node":{"id":"0f111c55-5ca8-5e47-a19d-b3cdde4943b7","frontmatter":{"path":null,"title":"Building the Right Product, Swiftly","date":"2021-03-24","readableDate":"24 March 2021","redirectFrom":null,"excerpt":null,"excerptQuote":{"name":"Phil Libin","quote":"How fast can you do each iteration? […] We could make a product pretty good faster than I ever thought possible before. […] Very few people can articulate and have the power of imagination to envision what they actually want. […] We don't ask customers what they want, we ask customers to respond to what we are giving them. […] What is too much to build and what is just the right amount? How do we know?"}},"fields":{"path":"/2021/03/build-right-swiftly/","slug":"/2021/03/build-right-swiftly/"},"html":"<p>I was recently listening to <a href=\"https://www.inc.com/christine-lagorio/phil-libin-evernote-what-i-know-podcast.html\">an interview of Phil Libin</a>, co-founder of Evernote. <a href=\"https://tonsky.me/blog/phil-libin/\">Tonsky wrote a recap</a> covering the best parts (notably about the startup model, culture and diversity issues), that I recommend.</p>\n<p>In addition, focusing on the product management side of the interview, I wanted to highlight a few paragraphs.<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup></p>\n<h2>Iterations</h2>\n<blockquote class=\"transcript\">\n<p>We kind of figured out what really felt like a cheat code. […]</p>\n<p>Let's say it takes 10.000 iterations to make a product great. You have to keep polishing, to keep refining and it takes around 10.000 iterations. <strong>The whole point is: how fast can you do each iteration?</strong></p>\n<p>At my previous company [dealing with security software, bank, government, etc.] <em>it would literally take a year and a half to do an iteration</em>. [You were making] some software, [sell it to an entity], deploy it, [deal with pilots], have a formal feedback. If it's gonna take a year and a half to make improvements to the product and you need to make 10.000 iterations, it's <strong>fifteen thousand years</strong> to make a great product. You just don't have this kind of time.</p>\n<p>At Evernote […] an iteration was twenty minutes, because we would just make something — and then, if we were honest with ourselves —, we could say \"does this feel better or worse than it did twenty minutes ago?\". And so, by having this really fast, really tight iteration loops […] we could just move really really quickly. <strong>We could make a product pretty good faster than I ever thought possible before.</strong></p>\n</blockquote>\n<p>And, as a consequence, the time to make a product <em>great</em> (not just \"pretty good\") is also reduced.</p>\n<p>One note though: we need to be careful not to confuse \"speed of iteration\" with \"velocity\".</p>\n<p>\"Iteration\" is your ability to experiment and refine a feature. You can iterate a lot but just release a very few impactful features (which is good). To the contrary, you can iterate slowly and output a lof of very low value, unpolished and mediocre features.<sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup></p>\n<p>Speed of iteration is important.<sup id=\"fnref-3\"><a href=\"#fn-3\" class=\"footnote-ref\">3</a></sup> Meaningless velocity is not. It's more debt, it's harder to maintain, and it results in more complex products for users.</p>\n<p>See “<a href=\"https://itamargilad.com/velocity-vs-impact/\">Stop Obsessing Over Development Velocity, Focus on This Instead</a>” for a good \"factual\" overview.</p>\n<h2>User feedback</h2>\n<blockquote class=\"transcript\">\n<p>It isn't so much that we didn't listen to our users. We listened to our users very carefully but in a very specific way. We listened to how they were reacting to what we were putting in front of them. We <strong>weren't</strong> asking them about what they wanted. […]</p>\n<p>If you ask users what they want, they are not gonna tell you what they want because they don't know. <strong>Very few people can articulate and have the power of imagination to envision what they actually want.</strong></p>\n<p>If you ask customers or prospective customers what they want, they'll tell you the stuff that they expect… and <em>very rarely will that actually be what they want</em>. [Then, he quotes Henry Ford famous line: “If I had asked people what they wanted, they would have said faster horses.”]. We don't ask customers what they want, we ask customers to respond to what we are giving them. Because then, it's much more useful: you can tell when people are confused, when they are happy, when they are satisfied and then we can decide who to ignore, which opinion to take seriously, etc.</p>\n</blockquote>\n<p>This is one of the topics I'm coming back to frequently in my job.</p>\n<p>How can you gather as much feedback as possible, while not becoming crushed by its weight or clients' expectations?</p>\n<p>Moreover, collecting the feedback is only one side of the coin (and the easy one). The second side is <em>how to digest it properly</em>. There, you discover that the product manager's toolkit is, unfortunately, very empty.<sup id=\"fnref-4\"><a href=\"#fn-4\" class=\"footnote-ref\">4</a></sup></p>\n<p>Users feedback are <em>critically important insights</em>, but it should be seen as an additional knowledge base for future decisions and hypotheses. Not as something you must respond to — or worse, act on — constantly.<sup id=\"fnref-5\"><a href=\"#fn-5\" class=\"footnote-ref\">5</a></sup></p>\n<p>See also “<a href=\"https://linear.app/method/build-with-users\">Build with users</a>” from the Linear method.</p>\n<h2>Building the right set of functionalities</h2>\n<blockquote class=\"transcript\">\n<p>[About Evernote] I think we just did too much stuff. There's always this balance of “what's the right amount of focus?”.</p>\n<p>It's hard to know in the moment… you can only do that in hindsight — if you succeed, you had the right amount of focus. If you don't, then you are either doing too much stuff, and you didn't have that focus, or not enough stuff, and you weren't thinking big enough or whatever.</p>\n<p>We always struggle with that balance. What is too much to build and what is just the right amount? How do we know? […] In hindsight, I would have worked for longer on some specific things before moving on to introduce [new features].</p>\n</blockquote>\n<p>This reminds me of a comment made by a candidate during an interview: <em>“One crucial part of a product manager's job is not about which features should be included, but which one should be removed or ignored”</em> (paraphrasing).</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>I slightly edited Phil Libin's speech to make it more readable in a written form. Emphasis is also mine.</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-2\">\n<p>Unfortunately, most agile teams using Scrum are optimised toward extreme-velocity instead of their ability to experiment and iterate quickly. Which is not what agile was about initially. I blame consulting firms.</p>\n<a href=\"#fnref-2\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-3\">\n<p>It's why we need to be able to deploy often, quickly, automatically, and confidently. It's also why the <a href=\"https://www.youtube.com/watch?v=PUv66718DII\"><em>development pipeline loop</em></a> should be as short as possible, between typing the code and observing the results.</p>\n<a href=\"#fnref-3\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-4\">\n<p>I've searched for many, <em>many</em> tools to handle feedback. I didn't find one that was 100% satisfying. At this point, I'm considering there is no \"right\" solution to this problem.</p>\n<p>  The most adequate tool is probably a generic data-visualisation or log processing platform like Kibana or Datadog. Tools that were not conceived for this problem specifically, but instead to digest, process, present and search raw data in quantity. Which is what user feedback is: information logs, but provided by users instead of machines.</p>\n<p>  See it similarly to an analytics tool: you would consult the platform everyday to have an overview of your users, how they feel about your product, and what they expect. Use that as additional data for experiments and ideas. When you look at analytics, you don't act immediately, and you cannot answer questions there. You use this trove of data to refine your hypotheses. Feedback should be seen the same way.</p>\n<p>  Using this approach would also remove the emotion from the equation. It would allow the product manager to take a step back and look at all this knowledge objectively… like analytics.</p>\n<p>  And for qualitative measures? Just run some real-life user tests and sessions.</p>\n<a href=\"#fnref-4\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-5\">\n<p>I think there's something profoundly wrong in the B2B (less so in B2C) world, where clients expect to have answers to everything they ask or want.</p>\n<a href=\"#fnref-5\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>"}},{"node":{"id":"0af0a60c-48d1-5994-9a48-b7547ef47828","frontmatter":{"path":null,"title":"I Only Have To Do This Once","date":"2020-12-14","readableDate":"14 December 2020","redirectFrom":null,"excerpt":null,"excerptQuote":{"name":"Michael Lopp","quote":"These humans don’t have a lazy bone in their bodies. What they appreciate is efficiency. _I want to design this system so I only have to do this once._"}},"fields":{"path":"/2020/12/do-this-once/","slug":"/2020/12/do-this-once/"},"html":"<p><a href=\"https://www.oreilly.com/library/view/the-art-of/9781492045687/\">Michael Lopp</a>:</p>\n<blockquote>\n<p>I’ve heard my favorite engineers claim the reason they are productive is because they are lazy. It’s a humblebrag. These humans don’t have a lazy bone in their bodies. What they appreciate is efficiency. <em>I want to design this system so I only have to do this once.</em></p>\n<p>Setting up the initial conditions and letting the work just happen.</p>\n</blockquote>"}},{"node":{"id":"e00707e5-f1ea-5e04-a250-3a9674402993","frontmatter":{"path":null,"title":"It's the Experience","date":"2020-08-31","readableDate":"31 August 2020","redirectFrom":null,"excerpt":null,"excerptQuote":{"name":"Peter Ramsey","quote":"But the issue isn't the completion rate, it's the _experience_."}},"fields":{"path":"/2020/08/the-experience/","slug":"/2020/08/the-experience/"},"html":"<p><a href=\"https://builtformars.co.uk/how-signing-up-to-notion-works/\">Peter Ramsey</a>:</p>\n<blockquote>\n<p>I see stuff like this every day. Companies 'trust the analytics'.</p>\n<p><em>\"99% of users complete the page, so it's not a problem\".</em></p>\n<p>But the issue isn't the completion rate, it's the <em>experience</em>.</p>\n<p>This example might only be a small confusion, that most people would overcome on their own, but it makes the experience less enjoyable.</p>\n<p>The more enjoyable an experience, the more we want our friends to do it.</p>\n</blockquote>\n<p>It's a problem I see in many products and videogames. A videogame can have a fantastic retention score, but it does not make it <em>fun</em>.</p>\n<p>I'm not against analytics (quite the contrary, if done respectfully), but it should not be your main driver. It should be a source of advices and confirmation to qualitative analysis, insights and/or gut feelings. <strong>It should be secondary to the experience itself.</strong></p>\n<p>Sometimes, you should do something because it makes your product <a href=\"https://matthieuoger.com/2016/03/delight/\">better and more pleasant</a>, not because it checks another item on an imaginary features checklist or because it pleases one specific client.</p>"}},{"node":{"id":"a2a73d8e-0dfa-5e72-a668-b5604bc3c229","frontmatter":{"path":null,"title":"Digital Product Design","date":"2020-05-17","readableDate":"17 May 2020","redirectFrom":null,"excerpt":null,"excerptQuote":{"name":"Ian Spalter","quote":"When I start a new project, the first thing I do is to define the problem, to understand the “why” of what we're trying to do and what is the thing we're trying to solve for?"}},"fields":{"path":"/2020/05/abstract-digital-product-design/","slug":"/2020/05/abstract-digital-product-design/"},"html":"<p>I watched the first season of <a href=\"https://www.netflix.com/title/80057883\">Abstract</a> on Netflix a few years ago when it was first released. It's a really fascinating series about design — in its broad definition — illustration, digital, industrial, photography, painting, etc.</p>\n<p>A second season was recently released, and I'm slowly watching the new episodes.</p>\n<p>The one about “Digital Product Design” is, obviously, particularly interesting to me. I've extracted a few highlights below.</p>\n<hr>\n<p>Ian Spalter in “<a href=\"https://www.imdb.com/title/tt10984548/\">Digital Product Design</a>”:</p>\n<blockquote>\n<p>When I start a new project, the first thing I do is to define the problem, to understand the “why” of what we're trying to do and what is the thing we're trying to solve for?</p>\n</blockquote>\n<p><br />See also this article entitled “<a href=\"https://www.intercom.com/blog/great-product-managers-dont-spend-time-on-solutions/\">Great PMs don’t spend their time on solutions</a>” by Intercom, and this quote by <a href=\"https://twitter.com/cagan\">Marty Cagan</a>:</p>\n<blockquote>\n<p><strong>Fall in love with the problem, not with the solution.</strong> […] It's far too easy to fall in love with your particular approach and lock yourself in prematurely.</p>\n</blockquote>\n<hr>\n<p>Ian Spalter:</p>\n<blockquote>\n<p>Your stove has a UI.</p>\n<p>So what conventions are out there in the world that you should take advantage of? You don't want someone to think too much about heating a pan. But then, sometimes there are opportunities to improve things.</p>\n<p>Maybe it's about adding options that make sense.</p>\n<p>So, I have a toaster that has a button that says “A bit more” on it. It literally says, “A bit more.”. Totally get why you would need that, right? 'Cause that's… that's part of the user experience of making toast.</p>\n<p>[…]</p>\n<p>Now, as a designer, there are costs to that, because now you added a new button. Is it worth it? Is it actually valuable? Is it something that people use, or is it just sort of superfluous, you know, and just, like, maybe sell some toasters.</p>\n<p>That's all part of the experience, thinking about the conditions and the context. And then, how do you work within those constraints to make that task as easy and pleasurable as possible?</p>\n</blockquote>\n<hr>\n<p>Ian Spalter:</p>\n<blockquote>\n<p>That idea of creativity being born through constraints is a powerful one.</p>\n</blockquote>\n<hr>\n<p>Robbie Gonzalez:</p>\n<blockquote>\n<p>If you've ever been scrolling through your Twitter feed or your Instagram feed, you've noticed you don't hit the bottom. That's a relatively new feature, called bottomless scroll.</p>\n</blockquote>\n<p>Aza Raskin:</p>\n<blockquote>\n<p>Which I feel like I have to forever atone for. When I was thinking about infinite scroll, like, the thought was… I, as a designer, have failed if I ask the user to make a choice they don't care about.</p>\n<p>So, scrolling already means “I haven't seen what I want, show me more.”</p>\n<p>So, why bother having little buttons at the bottom that you click to show — show more?</p>\n<p>I as an individual designer doing human–computer interaction will happily make an infinite scroll.</p>\n<p>But if I'm thinking at this higher level, I would have known that that would remove the stopping cues, just like when I'm drinking a glass of wine. I stop drinking when I finish my glass, and I think “Do I want more?”. Here, we're not giving people the stopping cue.</p>\n<p>And so it's literally wasted hundreds of millions of human hours.</p>\n</blockquote>"}},{"node":{"id":"b6e60689-e45f-57f9-9543-59a44f1f4c77","frontmatter":{"path":null,"title":"The Component","date":"2020-05-11","readableDate":"11 May 2020","redirectFrom":null,"excerpt":null,"excerptQuote":{"name":"Tom MacWright","quote":"The emerging norm for web development is to build a React single-page application, with server rendering."}},"fields":{"path":"/2020/05/the-component/","slug":"/2020/05/the-component/"},"html":"<p>Guillermo Rauch in the “<a href=\"https://rauchg.com/2020/vercel\">Vercel</a>” announcement (previously <em>Zeit</em>):</p>\n<blockquote>\n<p>Today the most interesting new opportunities for modernization have shifted to the frontend. […]</p>\n<p><strong>Components Are the Right Primitive for the Frontend</strong></p>\n<p>As the demand for richer frontend experiences has grown, the pressure is for teams to deliver component and design systems - coherent frontend experiences across every platform. […]</p>\n<p>Not too long ago, people weren’t talking about components, they were talking about selector engines and the DOM. Then React […] introduced this primitive of the component. Other frameworks allow you to define components, but the movement that really pioneered this trend was React.</p>\n<p>Years ago, [we] created Next.js because of our belief that React was so powerful it could become the full engine for the frontend. We started Next.js to provide some critical new functionality to make React consumable for everyone who wanted to do <strong>everything</strong> with React, instead of just one specific component. We saw a demand for the component-based React approach to drive the full frontend experience.</p>\n</blockquote>\n<p>I really love small, hyper-optimized websites with just the necessary bits (<a href=\"https://macwright.org/2016/05/03/the-featherweight-website.html\">I really enjoy reading people</a> <a href=\"https://paulstamatiou.com/about-this-website/\">writing about this topic</a>). I did that for years. This is how I taugh students.</p>\n<p>But using React made me reevaluate my tradeoffs slightly<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>.</p>\n<p><strong>Components</strong> and <a href=\"https://en.wikipedia.org/wiki/Declarative_programming\"><strong>declarative coding</strong></a> are such a better <em>programming model</em>. React <em>nailed that</em>. It's far from perfect, and some stuffs are way too complicated, but the basis is <em>right</em>. The foundations are <em>correct</em>.</p>\n<hr>\n<p>Tom MacWright in “<a href=\"https://macwright.org/2020/05/10/spa-fatigue.html\">Second-guessing the modern web</a>”:</p>\n<blockquote>\n<p>The emerging norm for web development is to build a React single-page application, with server rendering. The two key elements of this architecture are something like:</p>\n<ol>\n<li>The main UI is built &#x26; updated in JavaScript using React or something similar.</li>\n<li>The backend is an API that that application makes requests against.</li>\n</ol>\n<p>[…] There is a sweet spot of React: in moderately interactive interfaces. […] The high performance parts aren’t React. […] The low performance parts don’t need to be React. […]</p>\n</blockquote>\n<p><br />Later:</p>\n<blockquote>\n<p>Don’t read this as anti-React. I still think React is pretty great, and for a particular scope of use cases it’s the best tool you can find. […]</p>\n<p>But I’m at the point where you look at where the field is and what the alternatives are – taking a second look at unloved, unpopular, uncool things […] – and think <em>what the heck is happening</em>. We’re layering optimizations upon optimizations in order to get the SPA-like pattern to fit every use case, and I’m not sure that it is, well, worth it. […]</p>\n<p>Frameworks should lure people into the <a href=\"https://blog.codinghorror.com/falling-into-the-pit-of-success/\">pit of success</a>, where following the normal rules and using normal techniques is the winning approach. […] I don’t think that React, in this context, really is that pit of success. A naïvely implemented React SPA isn’t stable, or efficient, and it doesn’t naturally scale to significant complexity.</p>\n</blockquote>\n<p>Very true, unfortunately.</p>\n<p><br />After:</p>\n<blockquote>\n<p>I can, for example, guarantee that this blog is faster than any Gatsby blog (and much love to the Gatsby team) because there is nothing that a React static site can do that will make it faster than a non-React static site.</p>\n</blockquote>\n<p>This is undeniable. But perceptually, it's not necessarily the case nor that simple.<sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup></p>\n<p><br />Finally:</p>\n<blockquote>\n<p>I don’t think that everyone’s using the SPA pattern for no reason. For large corporations, it allows teams to work independently: the “frontend engineers” can “consume” “APIs” from teams that probably work in a different language and can only communicate through the hierarchy. For heavily interactive applications, it has real benefits in modularity, performance, and structure.</p>\n</blockquote>\n<p>If I chose to build my new websites with Next.js or Gatsby, it's because working with styled-components and React is so much better, fun and faster. And the result can be great for the users too, <em>if done well</em>.<sup id=\"fnref-3\"><a href=\"#fn-3\" class=\"footnote-ref\">3</a></sup></p>\n<p>In the end, there's no good answer here. There are just many tradeoffs (accessibility, customer experience, speed, team collaboration, developer experience, bandwith, performances, etc.). And, as always in computing, there's no <em>“ideal solution”</em>.</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>Not coding in my day-to-day job also changes my priorities. Creating websites is a hobby now (and was not the main focus of Pixelnest anyways), so I value my time and enjoyment much more.</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-2\">\n<p>For example, this website (Gatbsy, React, SPA) is heavier, but feels faster than <a href=\"https://pixelnest.io/\">Pixelnest</a>'s (Jekyll, no-JS). It's slower on first and initial uncached load, but after, it becomes faster — almost instant.</p>\n<a href=\"#fnref-2\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-3\">\n<p>Just imagining having to write BEM classes, put everything in big files, or repeat so much HTML would feel like going back ten years ago.</p>\n<p>  I actually did that recently, and it was <strong>not</strong> horrible. But it becomes a mess much more quickly, especially if you are working with more junior developers. You need even more discipline and rigor. It's possible for a one-man website, but it can break quickly as you add more people on a project if the experience level differs a lot.</p>\n<a href=\"#fnref-3\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>"}},{"node":{"id":"a9f927be-8914-58c9-98eb-ea73804c0910","frontmatter":{"path":null,"title":"The 100ms Rule","date":"2020-05-06","readableDate":"06 May 2020","redirectFrom":null,"excerpt":null,"excerptQuote":{"name":"Superhuman","quote":"Every interaction should be faster than 100ms. Why? Because 100ms is the threshold where interactions feel instantaneous."}},"fields":{"path":"/2020/05/the-100ms-rule/","slug":"/2020/05/the-100ms-rule/"},"html":"<p>Superhuman in “<a href=\"https://superhuman.com\">Blazingly Fast, The 100ms Rule</a>”:</p>\n<blockquote>\n<p>The creator of Gmail, Paul Buchheit, had a rule: every interaction should be faster than 100ms.</p>\n<p>Why? <strong>Because 100ms is the threshold where interactions feel instantaneous.</strong></p>\n</blockquote>\n<p><small>(Emphasis mine)</small></p>"}},{"node":{"id":"aae598fa-90ec-5b89-ad58-a84f67fde51d","frontmatter":{"path":null,"title":"In Search of (Software) Magic","date":"2020-05-05","readableDate":"05 May 2020","redirectFrom":null,"excerpt":null,"excerptQuote":{"name":"Linear","quote":"We truly believe that the tools teams use directly impact the outcome of their work. Bad tools encourage bad habits. Good tools encourage good habits."}},"fields":{"path":"/2020/05/in-search-of-software-magic/","slug":"/2020/05/in-search-of-software-magic/"},"html":"<p>From Linear's README, “<a href=\"https://linear.app/readme\">In Search of Magic</a>”:</p>\n<blockquote>\n<p><strong>Software used to be magical. We were excited about the new possibilities it opened up.</strong></p>\n<p>As the decades went by, software became more common. It became a larger part of our lives and an important part of how the world operates.</p>\n<p>Today software is everywhere, but it’s become increasingly rare to encounter truly great software. Computers are faster but apps work slower. Corners are cut with each release. Product decisions are driven by A/B tests.</p>\n<p>We’ve lost the magic along the way. And the result is software that’s frustrating and boring to use.</p>\n<p>We want to bring that magic back.</p>\n</blockquote>\n<p>Then:</p>\n<blockquote>\n<p><strong>Linear was born out of our own frustrations in building software projects in successful high-growth companies. We saw the effects of subpar tools and practices in our teams, so we decided to build something better.</strong></p>\n<p>[…] We’re creating software for teams who want to create impact. We think the software you use every day to work should be of the highest quality. It should feel exciting and enticing. It should be fast. And you should feel empowered when using it. Professional tools should have professional quality.</p>\n<p>We truly believe that the tools teams use directly impact the outcome of their work. Bad tools encourage bad habits. Good tools encourage good habits.</p>\n<p>The tools we use should make us more powerful and help us to accomplish our goals. […]</p>\n</blockquote>\n<p>Finally:</p>\n<blockquote>\n<p><strong>We believe that the quality of software is driven both by the talent of its creators and how they feel while they’re crafting it. Teams that are excited, engaged and proud of their work build better software.</strong></p>\n</blockquote>\n<p>I've rarely read a company's vision <em>this</em> good and exciting. And, damn, their website looks <em>so nice</em>.</p>"}},{"node":{"id":"7067c336-8219-5224-ae02-3289eb968426","frontmatter":{"path":null,"title":"The Outcome of a Successful Strategy","date":"2020-04-30","readableDate":"30 April 2020","redirectFrom":null,"excerpt":null,"excerptQuote":{"name":"Vjeux","quote":"I see people appearing to somehow always be in easy projects where everything just works out fine and they deliver a lot of impact. I used to think that they were lucky, now I think that they are pro players and are able to plan multiple shots in advance and able to execute on their strategy."}},"fields":{"path":"/2020/04/outcome-successful-strategy/","slug":"/2020/04/outcome-successful-strategy/"},"html":"<p>Vjeux in “<a href=\"https://blog.vjeux.com/2020/analysis/make-the-game-easy.html\">Make the game easy</a>”:</p>\n<blockquote>\n<p>[About building software] When I see people <strong>doing very visible and consequential actions</strong>, I find myself thinking that they are doing a “hero shot” and it must mean that they <strong>got “out of position” for the past few shots</strong> and now the <strong>only option that they have left is unsatisfying</strong> but there’s no other choice.</p>\n<p>On the other hand, I see people appearing to somehow <strong>always be in easy projects</strong> where everything just works out fine and they deliver a lot of impact. I used to think that they were lucky, now I think that they are pro players and are able to plan multiple shots in advance and <strong>able to execute on their strategy</strong>.</p>\n</blockquote>\n<p>It's like the \"sysadmin paradox\".<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup></p>\n<p>A great sysadmin is someone who seems to do almost nothing: the stack is functioning as expected, there's no outage (or really short ones), the software is updated, developers are autonomous, and all the processes and deployements are automated and painless<sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup>. This sysadmin is never too busy, answers quickly and acts fast. There's nothing extraordinary happening: it just… works. Almost too easy?</p>\n<p>A bad sysadmin will always be on the rush. Though… they do <em>look</em> busy.<sup id=\"fnref-3\"><a href=\"#fn-3\" class=\"footnote-ref\">3</a></sup></p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>Actually, this applies to many jobs, but I find it egregiously visible on support ones.</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-2\">\n<p><a href=\"https://matthieuoger.com/2020/02/tools-as-superpowers/\">Tools</a>, <a href=\"https://matthieuoger.com/2018/12/tools/\">tools</a>, and <a href=\"https://matthieuoger.com/2020/04/systemic-actions-automation/\">tools</a>!</p>\n<a href=\"#fnref-2\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-3\">\n<p>Don't get me wrong — they are some times and/or jobs where you have no other choice than working a lot. <em>It's the attitude that matters.</em></p>\n<a href=\"#fnref-3\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>"}},{"node":{"id":"f0715109-cc90-5e7e-9bc3-e5ce3a68dd3f","frontmatter":{"path":null,"title":"Systemic Actions through Automation","date":"2020-04-27","readableDate":"27 April 2020","redirectFrom":null,"excerpt":"Repeatability, robustness, shareability, mastery, documentability. That's automation, although at a bigger scope than just plain computer automation and scripting. That's why I like to be organized and to create systems in my life. It's a way for me to be consistent, coherent, efficient and meticulous. To care about what I do without putting more charge on me.","excerptQuote":null},"fields":{"path":"/2020/04/systemic-actions-automation/","slug":"/2020/04/systemic-actions-automation/"},"html":"<p>Brett Terpstra in “<a href=\"https://brettterpstra.com/2020/03/16/judging-the-value-of-automation/\">Judging the value of automation</a>”:</p>\n<blockquote>\n<p>I enjoy the process of building automations in myriad contexts, using myriad tools. […]</p>\n<p>I often think about the benefits of automation in the context of time savings. It makes things more efficient, removes drudgery. But I’ve realized over time that the <em>real</em> benefit of automation is avoiding mistakes.</p>\n<p>When I automate something (anything), I’m defining the steps that need to be included to complete the task. I’m no longer relying on my memory to ensure that every step is complete or the specific ways in which a step should be completed. This is especially useful if it’s something I don’t do very often […] if it helps me do the exact same thing one time a year later, that’s often worth as much as any amount of total time saved in my life.</p>\n</blockquote>\n<p><strong>Exactly!</strong> Avoiding mistakes is much more important than any time-saving<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>. Automation removes the need to remember what you need to do, and simplify the sharing of knowledge. It's basically a <em>self-fulfilling <a href=\"http://atulgawande.com/book/the-checklist-manifesto/\">checklist</a></em> that can be triggered by anybody.</p>\n<hr>\n<p>When I was developing a new website for <a href=\"https://pixelnest.io/\">Pixelnest Studio</a>, the first step was setuping the project, and automating the deployment, so that I could come back 6 months later and still be able to deploy easily without reading the README or the code.</p>\n<p>For <a href=\"http://steredenn.pixelnest.io\">Steredenn</a>, I created a lot of scripts to automate the release pipeline (building the game, packaging it, creating the different changelogs for the multiple platforms, etc.). This took me a non-negligible amount of time, but when I needed to do a new release after a long hiatus, it was a breeze and such a relief. Bonus: my associate could also do it in case I was not here, without having to dive in the code or knowing the full process.<sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup> In the game itself, <a href=\"https://dmayance.com/\">Damien</a> spent time creating little tools and helpers to go to a specific part of the game easily, so we could test different configurations and situations at will. <em>The result? A better, more stable game. Less mistakes. More time.</em></p>\n<p>I maintain a personal repository with <a href=\"https://github.com/solarsailer/dotfiles/\">most of my non-app scripts</a> on GitHub, and one of my most treasured part is a procedure to boostrap a new macOS installation in a semi-automated fashion. I don't do that often, but I know that I can confidently reproduce a new environment (in case of loss or theft) without a lot of struggle.</p>\n<p>I tried to put most of the settings of my apps (Alfred, iTerm2, Dash, etc.) on a cloud provider, so that I can share them between computers and have a backup (it's actually one of my selection criteria when I try a new tool — \"can I sync the settings easily?\"). The tools are tailored to my use, and I don't have to customize them again.</p>\n<p>I automated and documented our servers installation so that I could nuke and reinstantiate them easily. I'm not an experienced sysadmin at all, so having this ability to restart from scratch was a godsend to me.</p>\n<p>It's not pure automation, but it falls in the same ballpark for me. <strong>It's emptying your brain so that you can focus on what you care.</strong> <em>And, bonus, it's fun to do!</em></p>\n<hr>\n<p>As a different example: I scan and store all my documents online (pro or perso). When I'm asked for something (passport? last phone bill?), I take my phone, get the document and send it or print it directly.</p>\n<p>It's a really simple process: when I receive a paper, I quickly look at the document, <em>decide if I keep it or not</em> (if not, it's direct in the trash), then launch Scanbot, OCR it and boom it's stored in the right place. It has just become automatic for me now. It takes me literally 10s. And this has saved me so. much. time, as well as prevented the loss of important stuffs. <em>It would have been easier to just put that doc on a shelf and never care about it anymore</em>, sure. But then, when you search for a new flat, and need to find those twenty docs, you will thank yourself.</p>\n<p>It was <strong>always more effort initially</strong>, and we, humans, don't like effort. <em>But being a good slacker is not about doing nothing, it's actually doing more at the beginning, so you can do less later.</em> And that's what computers are good at too!</p>\n<hr>\n<p>That's also a reason why I love checklists so much. <strong>Checklists are the manual version of automation</strong>: you write it, you duplicate it, you cross it, and you forget it.</p>\n<p>Checklists are <em>also cheap and easy-to-write documentation</em> — for you, your family, your friends, your coworkers.<sup id=\"fnref-3\"><a href=\"#fn-3\" class=\"footnote-ref\">3</a></sup></p>\n<hr>\n<p>In computing (and life in general), there are a few principles that I consider extremely important and I'm trying to apply as much as possible:</p>\n<ul>\n<li><strong>Repeatability</strong>: repeat a task in a predictable manner and efficiently without dreading it;</li>\n<li><strong>Robustness</strong>: ensure you are doing the right steps and actions all the time, constantly. Backup. Use version control and history systematically;</li>\n<li><strong>Shareability</strong>: share information painlessly with other people, and more importantly, your future-self;<sup id=\"fnref-4\"><a href=\"#fn-4\" class=\"footnote-ref\">4</a></sup></li>\n<li><strong>Mastery</strong>: learn your tools, the shortcuts, and the customization points. Dive in the menus, try everything. This is physical automation: you train your body to repeat stuffs quickly without thinking about it.<sup id=\"fnref-5\"><a href=\"#fn-5\" class=\"footnote-ref\">5</a></sup> You save time, you reduce mistakes, you get better;</li>\n<li><strong>Documentability</strong>: enrich your knowledge base constantly - that is vitally important. Document what you do and why.<sup id=\"fnref-6\"><a href=\"#fn-6\" class=\"footnote-ref\">6</a></sup> Take notes, create a task in your todo apps to not forget something important. Offload your mind and find any information in no time.<sup id=\"fnref-7\"><a href=\"#fn-7\" class=\"footnote-ref\">7</a></sup></li>\n</ul>\n<p>That's automation, although at a bigger scope than just plain computer automation and scripting. That's why I like to be organized and to create systems<sup id=\"fnref-8\"><a href=\"#fn-8\" class=\"footnote-ref\">8</a></sup> in my life<sup id=\"fnref-9\"><a href=\"#fn-9\" class=\"footnote-ref\">9</a></sup> (and not only on my computers). It's a way for me to be consistent, coherent, efficient and meticulous. To care about what I do without putting more charge on me.</p>\n<p><em>And to be able to <strong>lose my time</strong> on the areas where it provides me joy.</em></p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>Which is still a really nice perk — we shouldn't diminish that property.</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-2\">\n<p>Don't get me wrong: it was not perfect. Some steps were still manual and I could have automated them, but there's a point where a good ol' checklist is enough and automating becomes a burden. However, if it's manual, <strong>it needs to be documented</strong>. Hence, generally, a checklist.</p>\n<a href=\"#fnref-2\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-3\">\n<p>You go on a trip? Write your packing checklist. Quickly scan it before leaving a place — you won't lose anything.</p>\n<a href=\"#fnref-3\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-4\">\n<p>That can be a script, a documentation, or a process. That's why, when I find an important information, I store it ASAP in my Dropbox so I can come back to it later. That's also why I'm blogging: to keep the relevant articles I found right at my fingertips. That's, finally, why I love scripting: I don't want to memorize how I need to execute an action — without scripts, it's more mistakes later, and less predictability. There's also a nice side-effect: it's an additional (and versioned) source of examples.</p>\n<a href=\"#fnref-4\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-5\">\n<p>That's why automation-freaks enjoy <a href=\"https://textexpander.com/\">text expansion</a> so much. But it can also be optimizing your commute route, or always putting stuffs at the same place in your flat so you don't have to think to locate them.</p>\n<a href=\"#fnref-5\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-6\">\n<p>This article showed that I like anecdotes. Here's another: when you have a company in France, you need to do something called \"l'approbation des comptes\" every year. It's boring, complex, and prone to mistakes. The first time I did it, I noted all the steps I needed to do while I was learning to do it. The next year, it — obviously — happened again, and I didn't have any clue about what I did. I remembered taking the notes, look at them, and in almost no time, was able to do it again. I could have learned once more, but this would have been a big waste a time, and a big chore. Instead, it was just a minor annoyance.</p>\n<a href=\"#fnref-6\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-7\">\n<p>If I hear someone talking about a thing they like, I note it. Later, when I need to find a gift, I can look at the list and pick there. It is not always useful, nor something you can do rightaway… but people are so happy when you give them something they actually truly wanted. It's also less waste.</p>\n<a href=\"#fnref-7\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-8\">\n<p><a href=\"https://youtu.be/lIW5jBrrsS0?t=857\">Tim Urban</a>:</p>\n<blockquote>\n<p>This also just speaks to the power of habits, because, changing a habit is like overwriting your current software, and if you do it enough time, what's cool about your brain is, it rewrites it to accommodate the new behaviour. You're saying \"oh, I guess we are doing this everyday now?\".</p>\n</blockquote>\n<a href=\"#fnref-8\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-9\">\n<p>Or as someone said: \"have a reset button for my apartment\". Everything has a spot, and in the mornings, when you wake up, you put everything back to its rightful place. It's always the same, it's easy to clean, it's easy to find if something's missing. <strong>It does not preclude change, but change should be desired and aware, not the byproduct of chaos.</strong></p>\n<a href=\"#fnref-9\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>"}}],"pathPrefix":"articles","first":true,"last":false,"index":1,"pageCount":9,"additionalContext":{}}}}