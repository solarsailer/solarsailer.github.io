{"componentChunkName":"component---src-components-templates-pagination-template-js","path":"/articles","webpackCompilationHash":"adaaea20c585d3e5d409","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"group":[{"node":{"id":"b6e60689-e45f-57f9-9543-59a44f1f4c77","frontmatter":{"path":null,"title":"The Component","date":"2020-05-11","readableDate":"11 May 2020","redirectFrom":null,"excerpt":null,"excerptQuote":{"name":"Tom MacWright","quote":"The emerging norm for web development is to build a React single-page application, with server rendering."}},"fields":{"path":"/2020/05/the-component/","slug":"/2020/05/the-component/"},"html":"<p>Guillermo Rauch in the “<a href=\"https://rauchg.com/2020/vercel\">Vercel</a>” announcement (previously <em>Zeit</em>):</p>\n<blockquote>\n<p>Today the most interesting new opportunities for modernization have shifted to the frontend. […]</p>\n<p><strong>Components Are the Right Primitive for the Frontend</strong></p>\n<p>As the demand for richer frontend experiences has grown, the pressure is for teams to deliver component and design systems - coherent frontend experiences across every platform. […]</p>\n<p>Not too long ago, people weren’t talking about components, they were talking about selector engines and the DOM. Then React […] introduced this primitive of the component. Other frameworks allow you to define components, but the movement that really pioneered this trend was React.</p>\n<p>Years ago, [we] created Next.js because of our belief that React was so powerful it could become the full engine for the frontend. We started Next.js to provide some critical new functionality to make React consumable for everyone who wanted to do <strong>everything</strong> with React, instead of just one specific component. We saw a demand for the component-based React approach to drive the full frontend experience.</p>\n</blockquote>\n<p>I really love small, hyper-optimized websites with just the necessary bits (<a href=\"https://macwright.org/2016/05/03/the-featherweight-website.html\">I really enjoy reading people</a> <a href=\"https://paulstamatiou.com/about-this-website/\">writing about this topic</a>). I did that for years. This is how I taugh students.</p>\n<p>But using React made me reevaluate my tradeoffs slightly<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>.</p>\n<p><strong>Components</strong> and <a href=\"https://en.wikipedia.org/wiki/Declarative_programming\"><strong>declarative coding</strong></a> are such a better <em>programming model</em>. React is far from perfect, and some stuffs are way too complicated, but the basis is <em>right</em>. The foundations are <em>correct</em>.</p>\n<hr>\n<p>Tom MacWright in “<a href=\"https://macwright.org/2020/05/10/spa-fatigue.html\">Second-guessing the modern web</a>”:</p>\n<blockquote>\n<p>The emerging norm for web development is to build a React single-page application, with server rendering. The two key elements of this architecture are something like:</p>\n<ol>\n<li>The main UI is built &#x26; updated in JavaScript using React or something similar.</li>\n<li>The backend is an API that that application makes requests against.</li>\n</ol>\n<p>[…] There is a sweet spot of React: in moderately interactive interfaces. […] The high performance parts aren’t React. […] The low performance parts don’t need to be React. […]</p>\n</blockquote>\n<p><br />Later:</p>\n<blockquote>\n<p>Don’t read this as anti-React. I still think React is pretty great, and for a particular scope of use cases it’s the best tool you can find. […]</p>\n<p>But I’m at the point where you look at where the field is and what the alternatives are – taking a second look at unloved, unpopular, uncool things […] – and think <em>what the heck is happening</em>. We’re layering optimizations upon optimizations in order to get the SPA-like pattern to fit every use case, and I’m not sure that it is, well, worth it. […]</p>\n<p>Frameworks should lure people into the <a href=\"https://blog.codinghorror.com/falling-into-the-pit-of-success/\">pit of success</a>, where following the normal rules and using normal techniques is the winning approach. […] I don’t think that React, in this context, really is that pit of success. A naïvely implemented React SPA isn’t stable, or efficient, and it doesn’t naturally scale to significant complexity.</p>\n</blockquote>\n<p>Very true, unfortunately.</p>\n<p><br />After:</p>\n<blockquote>\n<p>I can, for example, guarantee that this blog is faster than any Gatsby blog (and much love to the Gatsby team) because there is nothing that a React static site can do that will make it faster than a non-React static site.</p>\n</blockquote>\n<p>This is true. But perceptually, it's not necessarily the case nor that simple.<sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup></p>\n<p><br />Finally:</p>\n<blockquote>\n<p>I don’t think that everyone’s using the SPA pattern for no reason. For large corporations, it allows teams to work independently: the “frontend engineers” can “consume” “APIs” from teams that probably work in a different language and can only communicate through the hierarchy. For heavily interactive applications, it has real benefits in modularity, performance, and structure.</p>\n</blockquote>\n<p>If I chose to build my new websites with Next.js or Gatsby, it's because working with styled-components and React is so much better, fun and faster. And the result can be great for the users too, <em>if done well</em>.<sup id=\"fnref-3\"><a href=\"#fn-3\" class=\"footnote-ref\">3</a></sup></p>\n<p>In the end, there's no good answer here. There are just many tradeoffs (accessibility, customer experience, speed, team collaboration, developer experience, bandwith, performances, etc.). And, as always in computing, there's no <em>“ideal solution”</em>.</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>Not coding in my day-to-day job also changes my priorities. Creating websites is a hobby now (and was not the main focus of Pixelnest anyways), so I value my time and enjoyment much more.</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-2\">\n<p>For example, this website is heavier, but feels faster than <a href=\"https://pixelnest.io/\">Pixelnest</a>'s. It's slower on first and initial uncached load, but after, it becomes faster — almost instant.</p>\n<a href=\"#fnref-2\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-3\">\n<p>Just imagining having to write BEM classes, put everything in big files, or repeat so much HTML would feel like going back ten years ago.</p>\n<p>  I actually did that recently, and it was not horrible. But it becomes a mess much more quickly, especially if you are working with more junior developers. You need even more discipline and rigor. It's possible for a one-man website, but it can break quickly as you add more people on a project if the experience level differs a lot.</p>\n<a href=\"#fnref-3\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>"}},{"node":{"id":"a9f927be-8914-58c9-98eb-ea73804c0910","frontmatter":{"path":null,"title":"The 100ms Rule","date":"2020-05-06","readableDate":"06 May 2020","redirectFrom":null,"excerpt":null,"excerptQuote":{"name":"Superhuman","quote":"Every interaction should be faster than 100ms. Why? Because 100ms is the threshold where interactions feel instantaneous."}},"fields":{"path":"/2020/05/the-100ms-rule/","slug":"/2020/05/the-100ms-rule/"},"html":"<p>Superhuman in “<a href=\"https://superhuman.com\">Blazingly Fast, The 100ms Rule</a>”:</p>\n<blockquote>\n<p>The creator of Gmail, Paul Buchheit, had a rule: every interaction should be faster than 100ms.</p>\n<p>Why? <strong>Because 100ms is the threshold where interactions feel instantaneous.</strong></p>\n</blockquote>\n<p><small>(Emphasis mine)</small></p>"}},{"node":{"id":"aae598fa-90ec-5b89-ad58-a84f67fde51d","frontmatter":{"path":null,"title":"In Search of (Software) Magic","date":"2020-05-05","readableDate":"05 May 2020","redirectFrom":null,"excerpt":null,"excerptQuote":{"name":"Linear","quote":"We truly believe that the tools teams use directly impact the outcome of their work. Bad tools encourage bad habits. Good tools encourage good habits."}},"fields":{"path":"/2020/05/in-search-of-software-magic/","slug":"/2020/05/in-search-of-software-magic/"},"html":"<p>From Linear's README, “<a href=\"https://linear.app/readme\">In Search of Magic</a>”:</p>\n<blockquote>\n<p><strong>Software used to be magical. We were excited about the new possibilities it opened up.</strong></p>\n<p>As the decades went by, software became more common. It became a larger part of our lives and an important part of how the world operates.</p>\n<p>Today software is everywhere, but it’s become increasingly rare to encounter truly great software. Computers are faster but apps work slower. Corners are cut with each release. Product decisions are driven by A/B tests.</p>\n<p>We’ve lost the magic along the way. And the result is software that’s frustrating and boring to use.</p>\n<p>We want to bring that magic back.</p>\n</blockquote>\n<p>Then:</p>\n<blockquote>\n<p><strong>Linear was born out of our own frustrations in building software projects in successful high-growth companies. We saw the effects of subpar tools and practices in our teams, so we decided to build something better.</strong></p>\n<p>[…] We’re creating software for teams who want to create impact. We think the software you use every day to work should be of the highest quality. It should feel exciting and enticing. It should be fast. And you should feel empowered when using it. Professional tools should have professional quality.</p>\n<p>We truly believe that the tools teams use directly impact the outcome of their work. Bad tools encourage bad habits. Good tools encourage good habits.</p>\n<p>The tools we use should make us more powerful and help us to accomplish our goals. […]</p>\n</blockquote>\n<p>Finally:</p>\n<blockquote>\n<p><strong>We believe that the quality of software is driven both by the talent of its creators and how they feel while they’re crafting it. Teams that are excited, engaged and proud of their work build better software.</strong></p>\n</blockquote>\n<p>I've rarely read a company's vision <em>this</em> good and exciting. And, damn, their website looks <em>so nice</em>.</p>"}},{"node":{"id":"7067c336-8219-5224-ae02-3289eb968426","frontmatter":{"path":null,"title":"The Outcome of a Successful Strategy","date":"2020-04-30","readableDate":"30 April 2020","redirectFrom":null,"excerpt":null,"excerptQuote":{"name":"Vjeux","quote":"I see people appearing to somehow always be in easy projects where everything just works out fine and they deliver a lot of impact. I used to think that they were lucky, now I think that they are pro players and are able to plan multiple shots in advance and able to execute on their strategy."}},"fields":{"path":"/2020/04/outcome-successful-strategy/","slug":"/2020/04/outcome-successful-strategy/"},"html":"<p>Vjeux in “<a href=\"https://blog.vjeux.com/2020/analysis/make-the-game-easy.html\">Make the game easy</a>”:</p>\n<blockquote>\n<p>[About building software] When I see people <strong>doing very visible and consequential actions</strong>, I find myself thinking that they are doing a “hero shot” and it must mean that they <strong>got “out of position” for the past few shots</strong> and now the <strong>only option that they have left is unsatisfying</strong> but there’s no other choice.</p>\n<p>On the other hand, I see people appearing to somehow <strong>always be in easy projects</strong> where everything just works out fine and they deliver a lot of impact. I used to think that they were lucky, now I think that they are pro players and are able to plan multiple shots in advance and <strong>able to execute on their strategy</strong>.</p>\n</blockquote>\n<p>It's like the \"sysadmin paradox\".<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup></p>\n<p>A great sysadmin is someone who seems to do almost nothing: the stack is functioning as expected, there's no outage (or really short ones), the software is updated, developers are autonomous, and all the processes and deployements are automated and painless<sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup>. This sysadmin is never too busy, answers quickly and acts fast. There's nothing extraordinary happening: it just… works. Almost too easy?</p>\n<p>A bad sysadmin will always be on the rush. Though… they do <em>look</em> busy.<sup id=\"fnref-3\"><a href=\"#fn-3\" class=\"footnote-ref\">3</a></sup></p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>Actually, this applies to many jobs, but I find it egregiously visible on support ones.</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-2\">\n<p><a href=\"https://matthieuoger.com/2020/02/tools-as-superpowers/\">Tools</a>, <a href=\"https://matthieuoger.com/2018/12/tools/\">tools</a>, and <a href=\"https://matthieuoger.com/2020/04/systemic-actions-automation/\">tools</a>!</p>\n<a href=\"#fnref-2\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-3\">\n<p>Don't get me wrong — they are some times and/or jobs where you have no other choice than working a lot. <em>It's the attitude that matters.</em></p>\n<a href=\"#fnref-3\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>"}},{"node":{"id":"f0715109-cc90-5e7e-9bc3-e5ce3a68dd3f","frontmatter":{"path":null,"title":"Systemic Actions through Automation","date":"2020-04-27","readableDate":"27 April 2020","redirectFrom":null,"excerpt":"Repeatability, robustness, shareability, mastery, documentability. That's automation, although at a bigger scope than just plain computer automation and scripting. That's why I like to be organized and to create systems in my life. It's a way for me to be consistent, coherent, efficient and meticulous. To care about what I do without putting more charge on me.","excerptQuote":null},"fields":{"path":"/2020/04/systemic-actions-automation/","slug":"/2020/04/systemic-actions-automation/"},"html":"<p>Brett Terpstra in “<a href=\"https://brettterpstra.com/2020/03/16/judging-the-value-of-automation/\">Judging the value of automation</a>”:</p>\n<blockquote>\n<p>I enjoy the process of building automations in myriad contexts, using myriad tools. […]</p>\n<p>I often think about the benefits of automation in the context of time savings. It makes things more efficient, removes drudgery. But I’ve realized over time that the <em>real</em> benefit of automation is avoiding mistakes.</p>\n<p>When I automate something (anything), I’m defining the steps that need to be included to complete the task. I’m no longer relying on my memory to ensure that every step is complete or the specific ways in which a step should be completed. This is especially useful if it’s something I don’t do very often […] if it helps me do the exact same thing one time a year later, that’s often worth as much as any amount of total time saved in my life.</p>\n</blockquote>\n<p><strong>Exactly!</strong> Avoiding mistakes is much more important than any time-saving<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>. Automation removes the need to remember what you need to do, and simplify the sharing of knowledge. It's basically a <em>self-fulfilling <a href=\"http://atulgawande.com/book/the-checklist-manifesto/\">checklist</a></em> that can be triggered by anybody.</p>\n<hr>\n<p>When I was developing a new website for <a href=\"https://pixelnest.io/\">Pixelnest Studio</a>, the first step was setuping the project, and automating the deployment, so that I could come back 6 months later and still be able to deploy easily without reading the README or the code.</p>\n<p>For <a href=\"http://steredenn.pixelnest.io\">Steredenn</a>, I created a lot of scripts to automate the release pipeline (building the game, packaging it, creating the different changelogs for the multiple platforms, etc.). This took me a non-negligible amount of time, but when I needed to do a new release after a long hiatus, it was a breeze and such a relief. Bonus: my associate could also do it in case I was not here, without having to dive in the code or knowing the full process.<sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup> In the game itself, <a href=\"https://dmayance.com/\">Damien</a> spent time creating little tools and helpers to go to a specific part of the game easily, so we could test different configurations and situations at will. <em>The result? A better, more stable game. Less mistakes. More time.</em></p>\n<p>I maintain a personal repository with <a href=\"https://github.com/solarsailer/dotfiles/\">most of my non-app scripts</a> on GitHub, and one of my most treasured part is a procedure to boostrap a new macOS installation in a semi-automated fashion. I don't do that often, but I know that I can confidently reproduce a new environment (in case of loss or theft) without a lot of struggle.</p>\n<p>I tried to put most of the settings of my apps (Alfred, iTerm2, Dash, etc.) on a cloud provider, so that I can share them between computers and have a backup (it's actually one of my selection criteria when I try a new tool — \"can I sync the settings easily?\"). The tools are tailored to my use, and I don't have to customize them again.</p>\n<p>I automated and documented our servers installation so that I could nuke and reinstantiate them easily. I'm not an experienced sysadmin at all, so having this ability to restart from scratch was a godsend to me.</p>\n<p>It's not pure automation, but it falls in the same ballpark for me. <strong>It's emptying your brain so that you can focus on what you care.</strong> <em>And, bonus, it's fun to do!</em></p>\n<hr>\n<p>As a different example: I scan and store all my documents online (pro or perso). When I'm asked for something (passport? last phone bill?), I take my phone, get the document and send it or print it directly.</p>\n<p>It's a really simple process: when I receive a paper, I quickly look at the document, <em>decide if I keep it or not</em> (if not, it's direct in the trash), then launch Scanbot, OCR it and boom it's stored in the right place. It has just become automatic for me now. It takes me literally 10s. And this has saved me so. much. time, as well as prevented the loss of important stuffs. <em>It would have been easier to just put that doc on a shelf and never care about it anymore</em>, sure. But then, when you search for a new flat, and need to find those twenty docs, you will thank yourself.</p>\n<p>It was <strong>always more effort initially</strong>, and we, humans, don't like effort. <em>But being a good slacker is not about doing nothing, it's actually doing more at the beginning, so you can do less later.</em> And that's what computers are good at too!</p>\n<hr>\n<p>That's also a reason why I love checklists so much. <strong>Checklists are the manual version of automation</strong>: you write it, you duplicate it, you cross it, and you forget it.</p>\n<p>Checklists are <em>also cheap and easy-to-write documentation</em> — for you, your family, your friends, your coworkers.<sup id=\"fnref-3\"><a href=\"#fn-3\" class=\"footnote-ref\">3</a></sup></p>\n<hr>\n<p>In computing (and life in general), there are a few principles that I consider extremely important and I'm trying to apply as much as possible:</p>\n<ul>\n<li><strong>Repeatability</strong>: repeat a task in a predictable manner and efficiently without dreading it;</li>\n<li><strong>Robustness</strong>: ensure you are doing the right steps and actions all the time, constantly. Backup. Use version control and history systematically;</li>\n<li><strong>Shareability</strong>: share information painlessly with other people, and more importantly, your future-self;<sup id=\"fnref-4\"><a href=\"#fn-4\" class=\"footnote-ref\">4</a></sup></li>\n<li><strong>Mastery</strong>: learn your tools, the shortcuts, and the customization points. Dive in the menus, try everything. This is physical automation: you train your body to repeat stuffs quickly without thinking about it.<sup id=\"fnref-5\"><a href=\"#fn-5\" class=\"footnote-ref\">5</a></sup> You save time, you reduce mistakes, you get better;</li>\n<li><strong>Documentability</strong>: enrich your knowledge base constantly - that is vitally important. Document what you do and why.<sup id=\"fnref-6\"><a href=\"#fn-6\" class=\"footnote-ref\">6</a></sup> Take notes, create a task in your todo apps to not forget something important. Offload your mind and find any information in no time.<sup id=\"fnref-7\"><a href=\"#fn-7\" class=\"footnote-ref\">7</a></sup></li>\n</ul>\n<p>That's automation, although at a bigger scope than just plain computer automation and scripting. That's why I like to be organized and to create systems<sup id=\"fnref-8\"><a href=\"#fn-8\" class=\"footnote-ref\">8</a></sup> in my life<sup id=\"fnref-9\"><a href=\"#fn-9\" class=\"footnote-ref\">9</a></sup> (and not only on my computers). It's a way for me to be consistent, coherent, efficient and meticulous. To care about what I do without putting more charge on me.</p>\n<p><em>And to be able to <strong>lose my time</strong> on the areas where it provides me joy.</em></p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>Which is still a really nice perk — we shouldn't diminish that property.</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-2\">\n<p>Don't get me wrong: it was not perfect. Some steps were still manual and I could have automated them, but there's a point where a good ol' checklist is enough and automating becomes a burden. However, if it's manual, <strong>it needs to be documented</strong>. Hence, generally, a checklist.</p>\n<a href=\"#fnref-2\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-3\">\n<p>You go on a trip? Write your packing checklist. Quickly scan it before leaving a place — you won't lose anything.</p>\n<a href=\"#fnref-3\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-4\">\n<p>That can be a script, a documentation, or a process. That's why, when I find an important information, I store it ASAP in my Dropbox so I can come back to it later. That's also why I'm blogging: to keep the relevant articles I found right at my fingertips. That's, finally, why I love scripting: I don't want to memorize how I need to execute an action — without scripts, it's more mistakes later, and less predictability. There's also a nice side-effect: it's an additional (and versioned) source of examples.</p>\n<a href=\"#fnref-4\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-5\">\n<p>That's why automation-freaks enjoy <a href=\"https://textexpander.com/\">text expansion</a> so much. But it can also be optimizing your commute route, or always putting stuffs at the same place in your flat so you don't have to think to locate them.</p>\n<a href=\"#fnref-5\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-6\">\n<p>This article showed that I like anecdotes. Here's another: when you have a company in France, you need to do something called \"l'approbation des comptes\" every year. It's boring, complex, and prone to mistakes. The first time I did it, I noted all the steps I needed to do while I was learning to do it. The next year, it — obviously — happened again, and I didn't have any clue about what I did. I remembered taking the notes, look at them, and in almost no time, was able to do it again. I could have learned once more, but this would have been a big waste a time, and a big chore. Instead, it was just a minor annoyance.</p>\n<a href=\"#fnref-6\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-7\">\n<p>If I hear someone talking about a thing they like, I note it. Later, when I need to find a gift, I can look at the list and pick there. It is not always useful, nor something you can do rightaway… but people are so happy when you give them something they actually truly wanted. It's also less waste.</p>\n<a href=\"#fnref-7\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-8\">\n<p><a href=\"https://youtu.be/lIW5jBrrsS0?t=857\">Tim Urban</a>:</p>\n<blockquote>\n<p>This also just speaks to the power of habits, because, changing a habit is like overwriting your current software, and if you do it enough time, what's cool about your brain is, it rewrites it to accommodate the new behaviour. You're saying \"oh, I guess we are doing this everyday now?\".</p>\n</blockquote>\n<a href=\"#fnref-8\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-9\">\n<p>Or as someone said: \"have a reset button for my apartment\". Everything has a spot, and in the mornings, when you wake up, you put everything back to its rightful place. It's always the same, it's easy to clean, it's easy to find if something's missing. <strong>It does not preclude change, but change should be desired and aware, not the byproduct of chaos.</strong></p>\n<a href=\"#fnref-9\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>"}},{"node":{"id":"d13d3bb6-82ae-5708-a601-2c287ee9d327","frontmatter":{"path":null,"title":"Tech Waste","date":"2020-04-23","readableDate":"23 April 2020","redirectFrom":null,"excerpt":null,"excerptQuote":{"name":"Marty Cagan","quote":"What I believe is the largest source of waste in technology, and that’s waste in large companies […] that spend shocking amounts of money on technology every year for such paltry results."}},"fields":{"path":"/2020/04/tech-waste/","slug":"/2020/04/tech-waste/"},"html":"<p>Marty Cagan in “<a href=\"https://svpg.com/epic-waste/\">Epic Waste</a>”:</p>\n<blockquote>\n<p>[…] What I believe is the largest source of waste in technology, and that’s waste in large companies. I’m not talking about large technology companies like Apple and Amazon and Google [but] about the thousands of large banks, insurance companies, airlines, auto manufacturers, telcos, retailers, health care providers, and entertainment companies, that spend shocking amounts of money on technology every year for such paltry results.</p>\n<p>[Visited multiple companies] from each of these industries and with precious few exceptions, I find these large “IT” organizations, usually run by CIO’s or CFO’s, and operating with horribly inefficient and ineffective methods. They are typically using stakeholder-driven roadmaps, project-based funding and staffing, heavy use of contractors and outsourcing, waterfall processes (even when they claim they’re Agile), no effective product role, and minimal if any UX design. […]</p>\n<p>The amount of waste at these companies is staggering. The irony is that they often believe they’re actually saving money. […] They don’t understand that their model is requiring much larger teams, and more importantly, they are not able to operate at the speed of innovation […] Because these leaders don’t understand technology, they make short-sighted decisions and then struggle to connect the dots between their choices and the poor results.</p>\n</blockquote>"}},{"node":{"id":"cfbc586c-9f39-57ca-a4e4-50a7cb9be1c2","frontmatter":{"path":null,"title":"Tools as Superpowers","date":"2020-02-16","readableDate":"16 February 2020","redirectFrom":null,"excerpt":null,"excerptQuote":{"name":"Jonathan Lefèvre","quote":"This has mostly allowed me to realize what was truly making the strength of the customer service at Capitaine Train: its operational efficiency. In the end, if we could manage 2 millions of customers with a small team of 15 people, it was because we were extremely well equipped."}},"fields":{"path":"/2020/02/tools-as-superpowers/","slug":"/2020/02/tools-as-superpowers/"},"html":"<p><a href=\"https://medium.com/@djo/service-client-et-outils-de-productivit%C3%A9-lalignement-des-passions-a4a59216d6a7\">Jonathan Lefèvre</a> (loosely translated from French<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>):</p>\n<blockquote class=\"transcript\">\n<p>The topic of <em>scale</em> is as inevitable as it is hard, and seems so at odds with the human customer service idea, difficult to automate just by its own definition. Even the enterprises for which customer service is not a priority can find themselves confronted to the exact same problem. All of them must think about the best organization possible to handle efficiently the endless influx of requests and questions.</p>\n<p>[…] But this has mostly allowed me to realize what was truly making the strength of the customer service at Capitaine Train: its operational efficiency. In the end, if we could manage 2 millions of customers with a small team of 15 people, it was because we were extremely well equipped.</p>\n<p>Nothing was left to chance in the hunt for the lesser and useless click. And if this constant quest for the optimization of the processes is a topic that interests many entrepreneurs, I think that it manifests itself in an even more glaring way when you do customer service management of a start-up in hyper growth. […] When you spend days fighting the steamroller of client requests, you inevitably finish to devote a cult to any tool able to make you gain the smallest second of productivity.</p>\n<p>[…] So, I imagined naively that any customer service in the world would use the best tools in the market to work more efficiently. I was far from the mark. Numerous were those that didn't have a good system to manage notes and documentation, the basic and elementary reflexes to minimize interruptions, or just a sane way of handling emails.</p>\n</blockquote>\n<p>In general, adding <em>more</em> people and asking them to work <em>more</em> is not the right way to solve a problem — I would even say it will create the opposite effect in the long-run.</p>\n<p>I really like this article because it shares perfectly my vision for productivity and tooling. <a href=\"/2018/12/tools/\">Tools are humans' superpowers</a>. We need to harness them — and give tedious jobs to machines. Humans are good at creativity and thinking, but particularly bad at doing constant and repetitive tasks.</p>\n<p>Though, and <a href=\"https://jonathanlefevre.com/outils/mot-productivite/\">like the author</a>, when I say \"productivity\", it's not as a synonym for pushing people to always work more and to exhaust themselves (which is unsustainable and <em>not right</em>), but the contrary: doing more things, with less <strong>effort and time</strong>. The end-goal is to work less (or not all), enjoy the present, improve quality of life for everyone, while still being able to deliver great services and products for an healthier society. In that sense, computers are the great enabler of this vision.<sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup></p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>Original version:</p>\n<blockquote>\n<p>Le sujet du <em>scale</em> est aussi inéluctable que difficile, tant il semble peu compatible avec la notion même de service client humain, compliqué à automatiser par définition. Même les entreprises pour qui le service client n’est pas une priorité se retrouvent forcément confrontées à ce problème. Toutes doivent réfléchir à la meilleure organisation possible pour gérer efficacement ce flux incessant de demandes.</p>\n<p>[…] Mais elle m’a surtout permis de prendre conscience de ce qui faisait véritablement la force du service client de Capitaine Train : son efficacité opérationnelle. Au fond, si nous arrivions à gérer 2 millions de clients avec une petite équipe de 15 personnes, c’est parce que nous étions très bien outillés.</p>\n<p>Rien n’était laissé au hasard dans la chasse au moindre clic inutile. Et si cette constante quête d’optimisation des processus est un sujet qui intéresse beaucoup d’entrepreneurs, je crois qu’elle se manifeste d’une manière encore plus criante lorsqu’on fait du service client dans une start-up en pleine croissance. […] Quand on passe ses journées à affronter le rouleau compresseur des tickets clients, on finit par vouer un culte à chaque outil capable de nous faire gagner la moindre seconde de productivité.</p>\n<p>[…] Du coup, j’imaginais naïvement que tous les services clients du monde utilisaient les meilleurs outils du marché pour travailler plus efficacement. J’étais pourtant loin du compte. Nombreux sont ceux qui n’ont pas encore un bon système de prise de notes, les réflexes élémentaires pour minimiser les interruptions, ou encore une gestion saine de leurs e-mails.</p>\n</blockquote>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-2\">\n<p>It's probably utopian, I know.</p>\n<a href=\"#fnref-2\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>"}},{"node":{"id":"7e1a6fb7-4f92-525d-934b-e12f1d378fc7","frontmatter":{"path":null,"title":"Easy Choices, Hard Life — Hard Choices, Easy Life","date":"2020-02-09","readableDate":"09 February 2020","redirectFrom":null,"excerpt":null,"excerptQuote":{"name":"Tim Ferriss","quote":"The hard choices -- what we most fear doing, asking, saying -- these are very often exactly what we most need to do. And the biggest challenges and problems we face will never be solved with comfortable conversations, whether it's in your own head or with other people."}},"fields":{"path":"/2020/02/choices/","slug":"/2020/02/choices/"},"html":"<p>We were waiting in a rented car while being in a small town in the East of France. A town without charm. We had to stay here for one more hour before going to the wedding we were attending.</p>\n<p>Bored, with nothing special to do now that we had visited the city, I browsed a bit on YouTube. I fell on a <a href=\"https://www.ted.com/talks/tim_ferriss_why_you_should_define_your_fears_instead_of_your_goals/transcript?language=en\">video by Tim Ferriss which looked kinda okay</a> — I didn't know the guy that much, except that he was the host of a famous podcast which never interested me particularly.</p>\n<p>It was about \"defining fears instead of goals\". The video was around 15min, so I launched it. It started weirdly. The guy was talking about a suicide attempt, and the tone was dark, and at the same time, he was also joking.</p>\n<p>My girlfriend was next to me and I heard a \"what are you watching?!\" with a dubitative look. I continued.</p>\n<p>Surprisingly, I still think about this talk regularly, even 7 months later. This is what I kept in mind:</p>\n<blockquote>\n<p>In the Greco-Roman world, people used stoicism as a comprehensive system for doing many, many things. But for our purposes, chief among them was training yourself to separate what you can control from what you cannot control, and then doing exercises to focus exclusively on the former. This decreases emotional reactivity, which can be a superpower.</p>\n<p> […] And I did find a quote that made a big difference in my life, which was, \"We suffer more often in imagination than in reality,\" by Seneca the Younger, who was a famous Stoic writer.</p>\n<p>[…] \"The Cost of Inaction.\" Humans are very good at considering what might go wrong if we try something new, say, ask for a raise. What we don't often consider is the atrocious cost of the status quo -- not changing anything.</p>\n<p>[…] And the last was his mantra, which he applies to everything, and you can apply to everything:</p>\n<p><strong>\"Easy choices, hard life. Hard choices, easy life.\"</strong></p>\n<p>The hard choices -- what we most fear doing, asking, saying -- these are very often exactly what we most need to do. And the biggest challenges and problems we face will never be solved with comfortable conversations, whether it's in your own head or with other people.</p>\n</blockquote>\n<p>Initially, we were not sure what to think of this. Then, we discussed a bit. This sounded so logical, so simple, <em>so obvious</em>. But yet, thinking in these terms was really eye-opening.</p>\n<p>This talk is weird, disconcerting, with a strange tone and discourse. A bit pompous, especially with the business references distilled inside some really horrible anecdotes. But I would still recommend to <a href=\"https://www.ted.com/talks/tim_ferriss_why_you_should_define_your_fears_instead_of_your_goals/transcript?language=en\">watch it</a>.</p>"}},{"node":{"id":"f113bcfc-1586-5386-9ab6-01189525a587","frontmatter":{"path":null,"title":"Japan Pizza Culture","date":"2020-01-22","readableDate":"22 January 2020","redirectFrom":null,"excerpt":null,"excerptQuote":{"name":"Someone from the Associazione Verace Pizza Napoletana","quote":"Don’t tell anyone I told you this, but the Japanese are making better pizzas than we are."}},"fields":{"path":"/2020/01/japan-pizza-culture/","slug":"/2020/01/japan-pizza-culture/"},"html":"<p>Matt Goulding in “<a href=\"https://medium.com/airbnbmag/slice-of-tokyo-how-japan-became-a-pizza-hotspot-f734d834168\">Slice of Tokyo: How Japan Became a Pizza Hotspot</a>”:</p>\n<blockquote>\n<p>After passing my final exam before a panel of Naples’ old guard of pizzamakers, I asked the judges who else, besides the Italians, were making good pizzas. Most just smirked and ignored the question, as if it had no reasonable answer. But one of the older gentlemen waited until the conversation moved on before waving me in close:</p>\n<p>“Don’t tell anyone I told you this, but the Japanese are making better pizzas than we are.”</p>\n</blockquote>\n<p>I had, indeed, a wonderful Margherita at Seirinkan while I was in Tokyo three years ago.</p>\n<hr>\n<p>Related, from one of my favorite essays by Craig Mod on the same subject, “<a href=\"https://www.eater.com/2017/2/21/14670944/best-pizza-tokyo-guide\">Tokyo Neapolitan: The New Wave of Japanese Pizza</a>”:</p>\n<blockquote>\n<p>“Pizza shops are not quite like bakeries, not quite like restaurants — everything comes together in a single moment; 60 seconds determine the success or failure of a meal.”</p>\n<p>[…]</p>\n<p>It turns out the decision to pre-cut a pizza comes with its own philosophical underpinnings</p>\n<p>Inoue believes that because a pizza is not perfectly symmetrical in terms of ingredient distribution, each slice is inevitably a little different; there's no way to cut a pizza in a way that  perfectly captures its entire essence in a single slice. His ideal is for one person to eat an entire pie on their own, ensuring they experience the full spectrum of flavors.</p>\n</blockquote>\n<hr>\n<p>And also slightly related, a more recent one by the same Craig Mod: “<a href=\"https://www.eater.com/2019/12/16/21003452/japan-kissaten-traditional-cafes-pizza-toast-travel\">I Walked 600 Miles Across Japan for Pizza Toast</a>”.</p>"}}],"pathPrefix":"articles","first":true,"last":false,"index":1,"pageCount":12,"additionalContext":{}}}}