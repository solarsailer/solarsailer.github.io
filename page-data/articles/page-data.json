{"componentChunkName":"component---src-components-templates-pagination-template-js","path":"/articles","webpackCompilationHash":"86c76b239875385063ba","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"group":[{"node":{"id":"0556efae-1e1e-54cf-b38b-0c79110fb27f","frontmatter":{"path":null,"title":"The Blockchain, a Decade Later","date":"2022-06-30","readableDate":"30 June 2022","redirectFrom":null,"excerpt":null,"excerptQuote":{"name":"Nicholas Weaver","quote":"Cryptocurrencies, although a seemingly interesting idea, are simply not fit for purpose. They do not work as currencies, they are grossly inefficient, and they are not meaningfully distributed in terms of trust. […] Now I just want to take the entire cryptocurrency space and throw it into the sun. I know astronomers will tell you it’s easier to throw something into the void of space than to throw it into the sun. But it’s worth the extra energy to make sure some alien doesn’t find this mental virus."}},"fields":{"path":"/2022/06/crypto-fire/","slug":"/2022/06/crypto-fire/"},"html":"<p>Amidst the current crypto-crisis/downfall, I found this excellent interview of Nicholas Weaver by Nathan J. Robinson. The article is called “<a href=\"https://www.currentaffairs.org/2022/05/why-this-computer-scientist-says-all-cryptocurrency-should-die-in-a-fire/\">Why This Computer Scientist Says All Cryptocurrency Should “Die in a Fire”</a>”, and, as you can guess, is not really gentle with cryptocurrencies and the blockchain in general.</p>\n<p>The interview talks about many topics and is really interesting. Here's a few passages I enjoyed.</p>\n<hr>\n<p>Starting with Nicholas Weaver, in 2018:</p>\n<blockquote>\n<p>Cryptocurrencies, although a seemingly interesting idea, are simply not fit for purpose. <strong>They do not work as currencies, they are grossly inefficient, and they are not meaningfully distributed in terms of trust.</strong> Risks involving cryptocurrencies occur in four major areas: technical risks to participants, economic risks to participants, systemic risks to the cryptocurrency ecosystem, and societal risks.</p>\n</blockquote>\n<p>Briefly quoted in the article, Jackson Palmer, creator of Dogecoin:</p>\n<blockquote>\n<p>After years of studying it, I believe that cryptocurrency is an inherently right-wing, hyper-capitalistic technology built primarily to amplify the wealth of its proponents through a combination of tax avoidance, diminished regulatory oversight, and artificially enforced scarcity.</p>\n</blockquote>\n<p>In an exchange later in the article:</p>\n<blockquote>\n<p><strong>Robinson</strong>: “I am sure you have heard people say things like “Well, blockchain technology itself has lots of potential applications, it’s really interesting, offers lots of possible solutions to problems.” But one thing you point out in your lecture is that often, they are pretty vague about what these uses are, and usually when you get down to the facts, there’s a much simpler solution to whatever problem it is that wouldn’t use blockchain.”</p>\n<p><strong>Weaver</strong>: “The thing is, the idea behind a blockchain is actually a 30-plus-year-old idea. It’s called a hash chain. And we’ve known how to build these for longer than most of my students have lived. But people who spout “Blockchain!” don’t understand the technology. […] <strong>When somebody says you can solve X with blockchain, they don’t understand X, and you can ignore them.</strong>”</p>\n</blockquote>\n<p>Illustrated in this illuminating example:</p>\n<blockquote>\n<p>So, this was an example given by a purported expert in a blockchain class at Berkeley: “Okay, we have the cold chain problem. Vaccines, you need to ship cold, and if they ever get out of temperature spec, you have a ruined batch. And we can solve this with blockchain.”</p>\n<p>And my reaction is: “No”. The problem is you need to know when it got out of spec, and know that the receiver can know that it had gotten out of spec. And there’s an easy solution. It’s called a $1 ShockWatch label. So the ShockWatch group makes these temperature labels. You stick them on the package. And if it ever gets too warm, the color changes. No blockchain necessary.</p>\n<p><em>The fact that somebody was purporting this to be a real-world application meant they had not even thought about the problem for five seconds.</em></p>\n</blockquote>\n<p>In another exchange:</p>\n<blockquote>\n<p><strong>Robinson</strong>: “One of the things you’ve said, if I recall, is that the cryptocurrency space is “speed-running 500 years of financial history.” By which I take you to mean that all of the financial disasters of centuries past are playing out in short order, and then they have to rediscover the solutions that were put in place for those things not to happen.”</p>\n<p><strong>Weaver</strong>: “Yeah. […] The thing is, though, the cryptocurrency space itself has the object permanence of a horny mayfly. <em>They simply don’t remember their own scams.</em>”</p>\n</blockquote>\n<p>Finally, Nicholas Weaver, concluding the interview:</p>\n<blockquote>\n<p>That’s the problem, and that’s why I’ve actually changed my view over the past decade. Back in 2013, I thought it was amusing and silly, and I could get cool papers out of it. In 2018, I thought it was amusing, but pretty bad. [In 2022], it’s time to really think about burning it down. Now I just want to take the entire cryptocurrency space and throw it into the sun. I know astronomers will tell you it’s easier to throw something into the void of space than to throw it into the sun. But it’s worth the extra energy to make sure some alien doesn’t find this mental virus.</p>\n</blockquote>\n<p><small>(Emphasis mine)</small></p>"}},{"node":{"id":"224c1bd6-5b58-539b-9130-3d45abb86a11","frontmatter":{"path":null,"title":"Iterative Loop","date":"2022-04-27","readableDate":"27 April 2022","redirectFrom":null,"excerpt":null,"excerptQuote":{"name":"Cole Wehrle","quote":"You have to have an idea, and you have to figure out how to build it into something testable, and then you have to test it, and then you have to reflect upon it, and then you have to adjust your idea. Then you complete the iterative loop, and you do it again."}},"fields":{"path":"/2022/04/iterative-loop/","slug":"/2022/04/iterative-loop/"},"html":"<p><a href=\"https://woodlandwarmachine.podbean.com/e/episode-21-root-past-present-and-future-featuring-cole-wehrle/\">Cole Wehrle</a>:</p>\n<blockquote class=\"transcript\">\n<p>To make games, <strong>you have to walk through something called the iterative loop.</strong></p>\n<ol>\n<li>You have to have an idea,</li>\n<li>And you have to figure out <strong>how to build it into something testable</strong></li>\n<li>And then you have to test it,</li>\n<li>And then you have to reflect upon it,</li>\n<li>And then you have to adjust your idea.</li>\n</ol>\n<p>Then you complete the iterative loop, <em>and you do it again.</em></p>\n<p>Any designer will have to run around this iterative loop thousand of times before a game is completed.</p>\n<p>[…] <strong>Figure out ways to move, to make that loop smaller.</strong> And to run though it more efficiently. Or you'll burn yourself out.</p>\n</blockquote>\n<p><small>(Slightly edited for readability)</small></p>"}},{"node":{"id":"55e866df-d477-581c-8ef5-8cac72527e61","frontmatter":{"path":null,"title":"Pseudo-Intelligent Rotation Lock for Videos on iOS","date":"2022-03-15","readableDate":"15 March 2022","redirectFrom":null,"excerpt":"Use a Shortcut automation to intelligently toggle the rotation lock while playing videos in some apps.","excerptQuote":null},"fields":{"path":"/2022/03/rotation-videos/","slug":"/2022/03/rotation-videos/"},"html":"<p>iOS is missing one major, albeit a very small one in size, feature.</p>\n<p>You can use a rotation lock for your device, which restricts its ability to change orientation. By default, an iPhone senses when it is in landscape or portrait. This was one of the key features during the iPhone introduction (using an accelerometer). It looks very cool, but in reality, it's almost useless on a phone.</p>\n<p>Most users are just using the portrait mode all the time, and the landscape orientation is often toggled by accident while in bed or couch.</p>\n<p>That's why many users are activating the rotation lock permanently (I'm in this category). This is how it looks like:</p>\n<p><img src=\"/images/posts/2022-03-15-lock.jpg\" style=\"width: 300px;\" title=\"Rotation lock\" alt=\"Rotation lock\" /></p>\n<p>When it's active (like in the screenshot above), your device will never rotate automagically. You can stay in portrait orientation forever.</p>\n<p><strong>This is perfect, except for one thing: videos</strong>. Videos are the only thing you want to see in landscape, not portrait.<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup></p>\n<p>Since tons of videos are consumed through YouTube, the problem is particularly egregious there. Fortunately, YouTube added a way to switch a video to landscape, even when in portrait orientation (by using the fullscreen button), locked or not.</p>\n<p>It's not as practical as <em>physically</em> rotating the phone though.</p>\n<hr>\n<p>A few years ago, iOS' built-in <a href=\"https://apps.apple.com/us/app/shortcuts/id915249334\">Shortcuts</a><sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup> app added \"Automation\" triggers.</p>\n<p>With this, you can program an action when something happens on your phone. For example, if you open a certain app, you can automatically trigger something… <strong>like enabling or disabling the orientation lock!</strong> You can see where we are going…</p>\n<ol>\n<li>Open <a href=\"shortcuts://\">Shortcuts</a> <small>(it should be installed by default now)</small></li>\n<li>Go to the Automation tab</li>\n<li>\n<p>Create 2 automations:</p>\n<ol>\n<li>The first one is for when some apps are opened (<strong>disabling</strong> the rotation lock)</li>\n<li>The second does the reverse, when the same apps are closed (<strong>enabling</strong> the rotation lock again)</li>\n</ol>\n</li>\n<li>Obviously, set it to YouTube (and any other app necessary)</li>\n</ol>\n<p>You should have this by the end:</p>\n<p><img src=\"/images/posts/2022-03-15-automation.jpg\" title=\"Automations\" alt=\"Automations\" /></p>\n<p>Thanks to this automation, I keep the rotation lock activated all the time, but still physically rotate my device to play videos in landscape.</p>\n<p><em>This trick is not new at all.</em> It was feasible since iOS 13 or 14, so why am I talking about this? Until now, everytime the trigger would activate, iOS would throw an annoying notification:</p>\n<p><img src=\"/images/posts/2022-03-15-notification.jpg\" style=\"width: 300px;\" title=\"Notification\" alt=\"Notification\" /></p>\n<p>Because of that, I could never recommend this tip to anyone. However, today <a href=\"https://www.macstories.net/stories/ios-and-ipados-15-4-hands-on-with-universal-control-face-id-with-a-mask-and-more/\">Apple released iOS 15.4</a>, which finally <strong>allows an automation to hide its notification</strong>.</p>\n<p><br />Now, let's hope for a real “<a href=\"https://twitter.com/laughingquoll/status/1107930149645742080\">Lock orientation except when playing videos</a>” setting.</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>Well, portrait videos are becoming a thing thanks to TikTok and modern social networks, but that's another matter.</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-2\">\n<p>Shortcuts, previously Workflow, was bought by Apple and integrated into the system as its native automation app for power users. It's great.</p>\n<a href=\"#fnref-2\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>"}},{"node":{"id":"c1e0d3ad-27d8-5215-a252-720d83bcd2ec","frontmatter":{"path":null,"title":"Building the Right Product, Swiftly","date":"2021-03-24","readableDate":"24 March 2021","redirectFrom":null,"excerpt":null,"excerptQuote":{"name":"Phil Libin","quote":"How fast can you do each iteration? […] We could make a product pretty good faster than I ever thought possible before. […] Very few people can articulate and have the power of imagination to envision what they actually want. […] We don't ask customers what they want, we ask customers to respond to what we are giving them. […] What is too much to build and what is just the right amount? How do we know?"}},"fields":{"path":"/2021/03/build-right-swiftly/","slug":"/2021/03/build-right-swiftly/"},"html":"<p>I was recently listening to <a href=\"https://www.inc.com/christine-lagorio/phil-libin-evernote-what-i-know-podcast.html\">an interview of Phil Libin</a>, co-founder of Evernote. <a href=\"https://tonsky.me/blog/phil-libin/\">Tonsky wrote a recap</a> covering the best parts (notably about the startup model, culture and diversity issues), that I recommend.</p>\n<p>In addition, focusing on the product management side of the interview, I wanted to highlight a few paragraphs.<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup></p>\n<h2>Iterations</h2>\n<blockquote class=\"transcript\">\n<p>We kind of figured out what really felt like a cheat code. […]</p>\n<p>Let's say it takes 10.000 iterations to make a product great. You have to keep polishing, to keep refining and it takes around 10.000 iterations. <strong>The whole point is: how fast can you do each iteration?</strong></p>\n<p>At my previous company [dealing with security software, bank, government, etc.] <em>it would literally take a year and a half to do an iteration</em>. [You were making] some software, [sell it to an entity], deploy it, [deal with pilots], have a formal feedback. If it's gonna take a year and a half to make improvements to the product and you need to make 10.000 iterations, it's <strong>fifteen thousand years</strong> to make a great product. You just don't have this kind of time.</p>\n<p>At Evernote […] an iteration was twenty minutes, because we would just make something — and then, if we were honest with ourselves —, we could say \"does this feel better or worse than it did twenty minutes ago?\". And so, by having this really fast, really tight iteration loops […] we could just move really really quickly. <strong>We could make a product pretty good faster than I ever thought possible before.</strong></p>\n</blockquote>\n<p>And, as a consequence, the time to make a product <em>great</em> (not just \"pretty good\") is also reduced.</p>\n<p>One note though: we need to be careful not to confuse \"speed of iteration\" with \"velocity\".</p>\n<p>\"Iteration\" is your ability to experiment and refine a feature. You can iterate a lot but just release a very few impactful features (which is good). To the contrary, you can iterate slowly and output a lof of very low value, unpolished and mediocre features.<sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup></p>\n<p>Speed of iteration is important.<sup id=\"fnref-3\"><a href=\"#fn-3\" class=\"footnote-ref\">3</a></sup> Meaningless velocity is not. It's more debt, it's harder to maintain, and it results in more complex products for users.</p>\n<p>See “<a href=\"https://itamargilad.com/velocity-vs-impact/\">Stop Obsessing Over Development Velocity, Focus on This Instead</a>” for a good \"factual\" overview.</p>\n<h2>User feedback</h2>\n<blockquote class=\"transcript\">\n<p>It isn't so much that we didn't listen to our users. We listened to our users very carefully but in a very specific way. We listened to how they were reacting to what we were putting in front of them. We <strong>weren't</strong> asking them about what they wanted. […]</p>\n<p>If you ask users what they want, they are not gonna tell you what they want because they don't know. <strong>Very few people can articulate and have the power of imagination to envision what they actually want.</strong></p>\n<p>If you ask customers or prospective customers what they want, they'll tell you the stuff that they expect… and <em>very rarely will that actually be what they want</em>. [Then, he quotes Henry Ford famous line: “If I had asked people what they wanted, they would have said faster horses.”]. We don't ask customers what they want, we ask customers to respond to what we are giving them. Because then, it's much more useful: you can tell when people are confused, when they are happy, when they are satisfied and then we can decide who to ignore, which opinion to take seriously, etc.</p>\n</blockquote>\n<p>This is one of the topics I'm coming back to frequently in my job.</p>\n<p>How can you gather as much feedback as possible, while not becoming crushed by its weight or clients' expectations?</p>\n<p>Moreover, collecting the feedback is only one side of the coin (and the easy one). The second side is <em>how to digest it properly</em>. There, you discover that the product manager's toolkit is, unfortunately, very empty.<sup id=\"fnref-4\"><a href=\"#fn-4\" class=\"footnote-ref\">4</a></sup></p>\n<p>Users feedback are <em>critically important insights</em>, but it should be seen as an additional knowledge base for future decisions and hypotheses. Not as something you must respond to — or worse, act on — constantly.<sup id=\"fnref-5\"><a href=\"#fn-5\" class=\"footnote-ref\">5</a></sup></p>\n<p>See also “<a href=\"https://linear.app/method/build-with-users\">Build with users</a>” from the Linear method.</p>\n<h2>Building the right set of functionalities</h2>\n<blockquote class=\"transcript\">\n<p>[About Evernote] I think we just did too much stuff. There's always this balance of “what's the right amount of focus?”.</p>\n<p>It's hard to know in the moment… you can only do that in hindsight — if you succeed, you had the right amount of focus. If you don't, then you are either doing too much stuff, and you didn't have that focus, or not enough stuff, and you weren't thinking big enough or whatever.</p>\n<p>We always struggle with that balance. What is too much to build and what is just the right amount? How do we know? […] In hindsight, I would have worked for longer on some specific things before moving on to introduce [new features].</p>\n</blockquote>\n<p>This reminds me of a comment made by a candidate during an interview: <em>“One crucial part of a product manager's job is not about which features should be included, but which one should be removed or ignored”</em> (paraphrasing).</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>I slightly edited Phil Libin's speech to make it more readable in a written form. Emphasis is also mine.</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-2\">\n<p>Unfortunately, most agile teams using Scrum are optimised toward extreme-velocity instead of their ability to experiment and iterate quickly. Which is not what agile was about initially. I blame consulting firms.</p>\n<a href=\"#fnref-2\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-3\">\n<p>It's why we need to be able to deploy often, quickly, automatically, and confidently. It's also why the <a href=\"https://www.youtube.com/watch?v=PUv66718DII\"><em>development pipeline loop</em></a> should be as short as possible, between typing the code and observing the results.</p>\n<a href=\"#fnref-3\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-4\">\n<p>I've searched for many, <em>many</em> tools to handle feedback. I didn't find one that was 100% satisfying. At this point, I'm considering there is no \"right\" solution to this problem.</p>\n<p>  The most adequate tool is probably a generic data-visualisation or log processing platform like Kibana or Datadog. Tools that were not conceived for this problem specifically, but instead to digest, process, present and search raw data in quantity. Which is what user feedback is: information logs, but provided by users instead of machines.</p>\n<p>  See it similarly to an analytics tool: you would consult the platform everyday to have an overview of your users, how they feel about your product, and what they expect. Use that as additional data for experiments and ideas. When you look at analytics, you don't act immediately, and you cannot answer questions there. You use this trove of data to refine your hypotheses. Feedback should be seen the same way.</p>\n<p>  Using this approach would also remove the emotion from the equation. It would allow the product manager to take a step back and look at all this knowledge objectively… like analytics.</p>\n<p>  And for qualitative measures? Just run some real-life user tests and sessions.</p>\n<a href=\"#fnref-4\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-5\">\n<p>I think there's something profoundly wrong in the B2B (less so in B2C) world, where clients expect to have answers to everything they ask or want.</p>\n<a href=\"#fnref-5\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>"}},{"node":{"id":"45995c3c-95e0-58b0-beb0-6885348da617","frontmatter":{"path":null,"title":"I Only Have To Do This Once","date":"2020-12-14","readableDate":"14 December 2020","redirectFrom":null,"excerpt":null,"excerptQuote":{"name":"Michael Lopp","quote":"These humans don’t have a lazy bone in their bodies. What they appreciate is efficiency. I want to design this system so I only have to do this once."}},"fields":{"path":"/2020/12/do-this-once/","slug":"/2020/12/do-this-once/"},"html":"<p><a href=\"https://www.oreilly.com/library/view/the-art-of/9781492045687/\">Michael Lopp</a>:</p>\n<blockquote>\n<p>I’ve heard my favorite engineers claim the reason they are productive is because they are lazy. It’s a humblebrag. These humans don’t have a lazy bone in their bodies. What they appreciate is efficiency. <em>I want to design this system so I only have to do this once.</em></p>\n<p>Setting up the initial conditions and letting the work just happen.</p>\n</blockquote>"}},{"node":{"id":"eaa1593f-d04c-5e8f-9762-8a43c639c6ea","frontmatter":{"path":null,"title":"It's the Experience","date":"2020-08-31","readableDate":"31 August 2020","redirectFrom":null,"excerpt":null,"excerptQuote":{"name":"Peter Ramsey","quote":"But the issue isn't the completion rate, it's the experience."}},"fields":{"path":"/2020/08/the-experience/","slug":"/2020/08/the-experience/"},"html":"<p><a href=\"https://builtformars.co.uk/how-signing-up-to-notion-works/\">Peter Ramsey</a>:</p>\n<blockquote>\n<p>I see stuff like this every day. Companies 'trust the analytics'.</p>\n<p><em>\"99% of users complete the page, so it's not a problem\".</em></p>\n<p>But the issue isn't the completion rate, it's the <em>experience</em>.</p>\n<p>This example might only be a small confusion, that most people would overcome on their own, but it makes the experience less enjoyable.</p>\n<p>The more enjoyable an experience, the more we want our friends to do it.</p>\n</blockquote>\n<p>It's a problem I see in many products and videogames. A videogame can have a fantastic retention score, but it does not make it <em>fun</em>.</p>\n<p>I'm not against analytics (quite the contrary, if done respectfully), but it should not be your main driver. It should be a source of advices and confirmation to qualitative analysis, insights and/or gut feelings. <strong>It should be secondary to the experience itself.</strong></p>\n<p>Sometimes, you should do something because it makes your product <a href=\"https://matthieuoger.com/2016/03/delight/\">better and more pleasant</a>, not because it checks another item on an imaginary features checklist or because it pleases one specific client.</p>"}},{"node":{"id":"b9dc3207-b028-5afd-b099-72043c01f9dc","frontmatter":{"path":null,"title":"Digital Product Design","date":"2020-05-17","readableDate":"17 May 2020","redirectFrom":null,"excerpt":null,"excerptQuote":{"name":"Ian Spalter","quote":"When I start a new project, the first thing I do is to define the problem, to understand the “why” of what we're trying to do and what is the thing we're trying to solve for?"}},"fields":{"path":"/2020/05/abstract-digital-product-design/","slug":"/2020/05/abstract-digital-product-design/"},"html":"<p>I watched the first season of <a href=\"https://www.netflix.com/title/80057883\">Abstract</a> on Netflix a few years ago when it was first released. It's a really fascinating series about design — in its broad definition — illustration, digital, industrial, photography, painting, etc.</p>\n<p>A second season was recently released, and I'm slowly watching the new episodes.</p>\n<p>The one about “Digital Product Design” is, obviously, particularly interesting to me. I've extracted a few highlights below.</p>\n<hr>\n<p>Ian Spalter in “<a href=\"https://www.imdb.com/title/tt10984548/\">Digital Product Design</a>”:</p>\n<blockquote>\n<p>When I start a new project, the first thing I do is to define the problem, to understand the “why” of what we're trying to do and what is the thing we're trying to solve for?</p>\n</blockquote>\n<p><br />See also this article entitled “<a href=\"https://www.intercom.com/blog/great-product-managers-dont-spend-time-on-solutions/\">Great PMs don’t spend their time on solutions</a>” by Intercom, and this quote by <a href=\"https://twitter.com/cagan\">Marty Cagan</a>:</p>\n<blockquote>\n<p><strong>Fall in love with the problem, not with the solution.</strong> […] It's far too easy to fall in love with your particular approach and lock yourself in prematurely.</p>\n</blockquote>\n<hr>\n<p>Ian Spalter:</p>\n<blockquote>\n<p>Your stove has a UI.</p>\n<p>So what conventions are out there in the world that you should take advantage of? You don't want someone to think too much about heating a pan. But then, sometimes there are opportunities to improve things.</p>\n<p>Maybe it's about adding options that make sense.</p>\n<p>So, I have a toaster that has a button that says “A bit more” on it. It literally says, “A bit more.”. Totally get why you would need that, right? 'Cause that's… that's part of the user experience of making toast.</p>\n<p>[…]</p>\n<p>Now, as a designer, there are costs to that, because now you added a new button. Is it worth it? Is it actually valuable? Is it something that people use, or is it just sort of superfluous, you know, and just, like, maybe sell some toasters.</p>\n<p>That's all part of the experience, thinking about the conditions and the context. And then, how do you work within those constraints to make that task as easy and pleasurable as possible?</p>\n</blockquote>\n<hr>\n<p>Ian Spalter:</p>\n<blockquote>\n<p>That idea of creativity being born through constraints is a powerful one.</p>\n</blockquote>\n<hr>\n<p>Robbie Gonzalez:</p>\n<blockquote>\n<p>If you've ever been scrolling through your Twitter feed or your Instagram feed, you've noticed you don't hit the bottom. That's a relatively new feature, called bottomless scroll.</p>\n</blockquote>\n<p>Aza Raskin:</p>\n<blockquote>\n<p>Which I feel like I have to forever atone for. When I was thinking about infinite scroll, like, the thought was… I, as a designer, have failed if I ask the user to make a choice they don't care about.</p>\n<p>So, scrolling already means “I haven't seen what I want, show me more.”</p>\n<p>So, why bother having little buttons at the bottom that you click to show — show more?</p>\n<p>I as an individual designer doing human–computer interaction will happily make an infinite scroll.</p>\n<p>But if I'm thinking at this higher level, I would have known that that would remove the stopping cues, just like when I'm drinking a glass of wine. I stop drinking when I finish my glass, and I think “Do I want more?”. Here, we're not giving people the stopping cue.</p>\n<p>And so it's literally wasted hundreds of millions of human hours.</p>\n</blockquote>"}},{"node":{"id":"cc447735-8cfa-5b8c-8084-a9a13c9937cf","frontmatter":{"path":null,"title":"The Component","date":"2020-05-11","readableDate":"11 May 2020","redirectFrom":null,"excerpt":null,"excerptQuote":{"name":"Tom MacWright","quote":"The emerging norm for web development is to build a React single-page application, with server rendering."}},"fields":{"path":"/2020/05/the-component/","slug":"/2020/05/the-component/"},"html":"<p>Guillermo Rauch in the “<a href=\"https://rauchg.com/2020/vercel\">Vercel</a>” announcement (previously <em>Zeit</em>):</p>\n<blockquote>\n<p>Today the most interesting new opportunities for modernization have shifted to the frontend. […]</p>\n<p><strong>Components Are the Right Primitive for the Frontend</strong></p>\n<p>As the demand for richer frontend experiences has grown, the pressure is for teams to deliver component and design systems - coherent frontend experiences across every platform. […]</p>\n<p>Not too long ago, people weren’t talking about components, they were talking about selector engines and the DOM. Then React […] introduced this primitive of the component. Other frameworks allow you to define components, but the movement that really pioneered this trend was React.</p>\n<p>Years ago, [we] created Next.js because of our belief that React was so powerful it could become the full engine for the frontend. We started Next.js to provide some critical new functionality to make React consumable for everyone who wanted to do <strong>everything</strong> with React, instead of just one specific component. We saw a demand for the component-based React approach to drive the full frontend experience.</p>\n</blockquote>\n<p>I really love small, hyper-optimized websites with just the necessary bits (<a href=\"https://macwright.org/2016/05/03/the-featherweight-website.html\">I really enjoy reading people</a> <a href=\"https://paulstamatiou.com/about-this-website/\">writing about this topic</a>). I did that for years. This is how I taugh students.</p>\n<p>But using React made me reevaluate my tradeoffs slightly<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>.</p>\n<p><strong>Components</strong> and <a href=\"https://en.wikipedia.org/wiki/Declarative_programming\"><strong>declarative coding</strong></a> are such a better <em>programming model</em>. React <em>nailed that</em>. It's far from perfect, and some stuffs are way too complicated, but the basis is <em>right</em>. The foundations are <em>correct</em>.</p>\n<hr>\n<p>Tom MacWright in “<a href=\"https://macwright.org/2020/05/10/spa-fatigue.html\">Second-guessing the modern web</a>”:</p>\n<blockquote>\n<p>The emerging norm for web development is to build a React single-page application, with server rendering. The two key elements of this architecture are something like:</p>\n<ol>\n<li>The main UI is built &#x26; updated in JavaScript using React or something similar.</li>\n<li>The backend is an API that that application makes requests against.</li>\n</ol>\n<p>[…] There is a sweet spot of React: in moderately interactive interfaces. […] The high performance parts aren’t React. […] The low performance parts don’t need to be React. […]</p>\n</blockquote>\n<p><br />Later:</p>\n<blockquote>\n<p>Don’t read this as anti-React. I still think React is pretty great, and for a particular scope of use cases it’s the best tool you can find. […]</p>\n<p>But I’m at the point where you look at where the field is and what the alternatives are – taking a second look at unloved, unpopular, uncool things […] – and think <em>what the heck is happening</em>. We’re layering optimizations upon optimizations in order to get the SPA-like pattern to fit every use case, and I’m not sure that it is, well, worth it. […]</p>\n<p>Frameworks should lure people into the <a href=\"https://blog.codinghorror.com/falling-into-the-pit-of-success/\">pit of success</a>, where following the normal rules and using normal techniques is the winning approach. […] I don’t think that React, in this context, really is that pit of success. A naïvely implemented React SPA isn’t stable, or efficient, and it doesn’t naturally scale to significant complexity.</p>\n</blockquote>\n<p>Very true, unfortunately.</p>\n<p><br />After:</p>\n<blockquote>\n<p>I can, for example, guarantee that this blog is faster than any Gatsby blog (and much love to the Gatsby team) because there is nothing that a React static site can do that will make it faster than a non-React static site.</p>\n</blockquote>\n<p>This is undeniable. But perceptually, it's not necessarily the case nor that simple.<sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup></p>\n<p><br />Finally:</p>\n<blockquote>\n<p>I don’t think that everyone’s using the SPA pattern for no reason. For large corporations, it allows teams to work independently: the “frontend engineers” can “consume” “APIs” from teams that probably work in a different language and can only communicate through the hierarchy. For heavily interactive applications, it has real benefits in modularity, performance, and structure.</p>\n</blockquote>\n<p>If I chose to build my new websites with Next.js or Gatsby, it's because working with styled-components and React is so much better, fun and faster. And the result can be great for the users too, <em>if done well</em>.<sup id=\"fnref-3\"><a href=\"#fn-3\" class=\"footnote-ref\">3</a></sup></p>\n<p>In the end, there's no good answer here. There are just many tradeoffs (accessibility, customer experience, speed, team collaboration, developer experience, bandwith, performances, etc.). And, as always in computing, there's no <em>“ideal solution”</em>.</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>Not coding in my day-to-day job also changes my priorities. Creating websites is a hobby now (and was not the main focus of Pixelnest anyways), so I value my time and enjoyment much more.</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-2\">\n<p>For example, this website (Gatbsy, React, SPA) is heavier, but feels faster than <a href=\"https://pixelnest.io/\">Pixelnest</a>'s (Jekyll, no-JS). It's slower on first and initial uncached load, but after, it becomes faster — almost instant.</p>\n<a href=\"#fnref-2\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-3\">\n<p>Just imagining having to write BEM classes, put everything in big files, or repeat so much HTML would feel like going back ten years ago.</p>\n<p>  I actually did that recently, and it was <strong>not</strong> horrible. But it becomes a mess much more quickly, especially if you are working with more junior developers. You need even more discipline and rigor. It's possible for a one-man website, but it can break quickly as you add more people on a project if the experience level differs a lot.</p>\n<a href=\"#fnref-3\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>"}},{"node":{"id":"1101a221-57ff-59c0-8316-e4874216baf4","frontmatter":{"path":null,"title":"The 100ms Rule","date":"2020-05-06","readableDate":"06 May 2020","redirectFrom":null,"excerpt":null,"excerptQuote":{"name":"Superhuman","quote":"Every interaction should be faster than 100ms. Why? Because 100ms is the threshold where interactions feel instantaneous."}},"fields":{"path":"/2020/05/the-100ms-rule/","slug":"/2020/05/the-100ms-rule/"},"html":"<p>Superhuman in “<a href=\"https://superhuman.com\">Blazingly Fast, The 100ms Rule</a>”:</p>\n<blockquote>\n<p>The creator of Gmail, Paul Buchheit, had a rule: every interaction should be faster than 100ms.</p>\n<p>Why? <strong>Because 100ms is the threshold where interactions feel instantaneous.</strong></p>\n</blockquote>\n<p><small>(Emphasis mine)</small></p>"}}],"pathPrefix":"articles","first":true,"last":false,"index":1,"pageCount":10,"additionalContext":{}}}}