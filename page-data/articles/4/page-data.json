{"componentChunkName":"component---src-components-templates-pagination-template-js","path":"/articles/4","webpackCompilationHash":"de4364ded07c40e5b798","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"group":[{"node":{"id":"afff2429-389a-5ff1-be5b-1e7ba73396d3","frontmatter":{"path":null,"title":"The Sad State of Web App Deployment","date":"2015-10-13","readableDate":"13 October 2015","redirectFrom":null,"excerpt":null,"excerptQuote":{"name":"Eevee","quote":"We’ve been doing this for 20 years. We should have this by now. It should work, it should be pluggable and agnostic, and it should do everything right. […] Instead, we stack layer after layer of additional convoluted crap on top of what we’ve already got because we don’t know how to fix it."}},"fields":{"path":"/2015/10/sad-state-web-deployment/","slug":"/2015/10/sad-state-web-deployment/"},"html":"<p><a href=\"http://eev.ee/blog/2015/09/17/the-sad-state-of-web-app-deployment/\">Eevee on Fuzzy Notepad</a>:</p>\n<blockquote>\n<p>We’ve been doing this for 20 years. We should have this by now. It should work, it should be pluggable and agnostic, and it should do everything right. […]</p>\n<p>Instead, we stack layer after layer of additional convoluted crap on top of what we’ve already got because we don’t know how to fix it. Instead, we flit constantly from Thin to Mongrel to Passenger to Heroku to Bitnami to Docker to whatever new way to deploy trivial apps came out yesterday. Instead, we obsess over adding better Sass integration to our frameworks.</p>\n<p>And I’m really not picking on Ruby, or Rails, or this particular app. I hate deploying my own web software, because there are so many parts all over the system that only barely know about each other, but if any of them fail then the whole shebang stops working.</p>\n</blockquote>\n<p>See also: <a href=\"https://matthieuoger.com/2015/01/something-slightly-less-terrible/\">Something Slightly Less Terrible</a>.</p>"}},{"node":{"id":"d8a8763b-3ca6-598b-83a3-55c82acd1c69","frontmatter":{"path":null,"title":"Compilation by a Thousand Semicolons and Commas","date":"2015-09-27","readableDate":"27 September 2015","redirectFrom":null,"excerpt":"Something I like in most modern programming languages is that they tend to ditch semicolons completely — semicolons are a nuisance, a waste of time, a source of (easily fixable) errors, ugly and unnecessary.","excerptQuote":null},"fields":{"path":"/2015/09/semicolon-comma-programming/","slug":"/2015/09/semicolon-comma-programming/"},"html":"<p>Something I like in most modern programming languages is that they tend to ditch semicolons completely.</p>\n<p>Semicolons are a nuisance, a waste of time, a source of (easily fixable) errors, ugly and unnecessary.</p>\n<p>Compilers can easily work without them. Keeping them in old languages is, most of the time, simply a question of backward-compatibility.</p>\n<p>And that's fine, after all. In modern languages though, this is something that must be avoided. It's wrong and useless.</p>\n<p>Consider this snippet of Swift:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> greeting <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello!\"</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> optionalName <span class=\"token punctuation\">{</span>\n    greeting <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>name<span class=\"token delimiter variable\">)</span></span>\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>No semicolon.</strong> Great. Now, consider a similar snippet of Go:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>x <span class=\"token builtin\">float64</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> x <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"i\"</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprint</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">.</span><span class=\"token function\">Sqrt</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>It's pretty nice, isn't it?</p>\n<p>Go <strong>does</strong> use semicolons in its grammar. However, it's the lexer's role to add them, not the developer. <a href=\"http://zachholman.com/posts/shit-work/\">Let the machines do the shit work.</a></p>\n<p>Here's the extract from <a href=\"https://golang.org/doc/effective_go.html#semicolons\">Effective Go</a>:</p>\n<blockquote>\n<p>Like C, Go's formal grammar uses semicolons to terminate statements, but unlike in C, those semicolons do not appear in the source. Instead the lexer uses a simple rule to insert semicolons automatically as it scans, so the input text is mostly free of them.</p>\n</blockquote>\n<p>And unlike in an extremely <a href=\"http://blog.izs.me/post/2353458699/an-open-letter-to-javascript-leaders-regarding\">popular</a> <a href=\"http://mislav.uniqpath.com/2010/05/semicolons/\">language</a>, Go imposes some formatting rules to its programmers and nobody has a problem with <a href=\"http://inimino.org/~inimino/blog/javascript_semicolons\">ASI</a>.</p>\n<p>However, there's still one perfectly valid case where semicolons are not optional:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">if</span> v <span class=\"token operator\">:=</span> math<span class=\"token punctuation\">.</span><span class=\"token function\">Pow</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> v <span class=\"token operator\">&lt;</span> limit <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> v\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Between <code class=\"language-text\">math.Pow(x, n)</code> and <code class=\"language-text\">v &lt; limit</code>, you will find a semicolon. Because the two statements are on the same line, the compiler needs a semicolon to know where to end a statement and start the next one.</p>\n<p>Basically, the rule is simple:</p>\n<ul>\n<li>Do not use a semicolon when a statement ends with a newline.</li>\n<li>Use a semicolon when a statement is followed by another statement on the same line.</li>\n</ul>\n<p>That's the basic consensus in new languages.</p>\n<hr>\n<p>So, here's my question: <strong>why don't we do the same thing with commas?!</strong></p>\n<p>Let's look at the following snippet of Swift:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> test <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>As you can see, each value of the array is separated by a comma. Same rule as the semicolons: if you are on the same line, use a separator. <em>In this case, it's a comma instead of the semicolon because the semantic is different.</em> Fine.</p>\n<p>Now, let's look at the same snippet with a multi-lines notation — this example might seem contrived, but this kind of notation is clearer when the values are more complex and/or numerous:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> example <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"c\"</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>Wait. What. <strong>It's exactly like in the one-line declaration just above.</strong> Which is not surprising, because almost any language will do that.</p>\n<p>That's inconsistent though. For semicolons, we omit them when there's a newline, but here, for a comma, we do not.</p>\n<p>The correct syntax should be:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> test <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token string\">\"a\"</span>\n  <span class=\"token string\">\"b\"</span>\n  <span class=\"token string\">\"c\"</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>Simpler, prettier. And it gives a few bonuses beyond the cosmetic aspect:</p>\n<ol>\n<li>It's less error-prone.</li>\n<li>\n<p>It's more practical for versioning tool's diffs:</p>\n<p><img src=\"/images/posts/2015-09-27-diff.png\" alt=\"Diff\"></p>\n</li>\n<li>It's consistent with the semicolon behavior.</li>\n</ol>\n<p>I would apply the same rule to functions definition, maps or anything which needs commas, like I wrote in this example:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// One-line, comma.</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Or:</span>\n\n<span class=\"token comment\">// Multi-lines, no comma.</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>\n  x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span>\n  y<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In Go, those notations are not frequent because the formatting rules are stricter. However, in a struct definition, you must write this:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Point <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n  X <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span>\n  Y <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><em>(Note the trailing comma on the last line.)</em></p>\n<p>It's better than what Swift does (at least, diffs are not impacted and you don't have to think to add or remove a comma — you just have to).</p>\n<p>But why did they choose to keep the commas? No comma at all would have been way better AND coherent with the semicolon rule.</p>\n<p>And you know what is even more inconsistent? This, which is perfectly valid Go code:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span>\n  x <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n  y <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n  z <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Yep, this time, there is nothing at all.</p>"}},{"node":{"id":"bfe4a817-5d8e-5768-b698-9d09252ab482","frontmatter":{"path":null,"title":"What Makes an Indie Hit?","date":"2015-09-18","readableDate":"18 September 2015","redirectFrom":null,"excerpt":null,"excerptQuote":null},"fields":{"path":"/2015/09/what-makes-indie-hit/","slug":"/2015/09/what-makes-indie-hit/"},"html":"<p>“<a href=\"http://www.gamasutra.com/blogs/RyanClark/20150917/253842/What_Makes_an_Indie_Hit_How_to_Choose_the_Right_Design.php\">What Makes an Indie Hit?: How to Choose the Right Design</a>” by Ryan Clark (of <a href=\"http://necrodancer.com/\">Crypt of the NecroDancer</a>) is an interesting read:</p>\n<blockquote>\n<p>In this industry it's difficult to go far without learning from others. But from whom should we learn? I think it is wisest to study developers who have been repeatedly successful. Each time a developer creates another successful game, it becomes less and less likely that their repeated successes have been due to luck. Only a minuscule fraction of indie games break even, so what are the odds of developers like Jamie Cheng, Edmund McMillen, and Cliff Harris stringing together a number of successful games? The odds are low. There must be something other than luck at work! So perhaps these folks (and many others like them!) are the ones you should be studying and listening to.</p>\n</blockquote>\n<p>I generally agree with the article (read it!), but there is one point that bothers me.</p>\n<blockquote>\n<p>If you want people to remember your game, to talk about your game, to write articles about your game, etc, it needs to have a hook. Preferably multiple hooks!</p>\n</blockquote>\n<p>Ok. This is spot on. However, and while I think that innovative games are important and crucial to explore original ideas and designs, <strong>not every game can be a new experience.</strong></p>\n<p>We need fun and excellent games in existing genres. Having brilliant roguelike, RTS, shmup, point &#x26; click, you name it… is equally important. And in this case, how do you hook people?</p>\n<p>What we wanted to do with <a href=\"http://steredenn.pixelnest.io\">Steredenn</a> (my game) is an excellent shmup-roguelike. We don't want to reinvent a genre or to experiment. We just want to make a great, fun, polished and addictive game. That's all. There's a market for a game like that — but we struggle to stand out of the crowd (and we tried many things like articles, arcade cabinet, tutorials, shows, devblog, contacts, press, etc.).</p>\n<p>If we had followed the \"hooks rule\", we would never have made Steredenn.<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup> But I truly think there's a place and an audience for this kind of games.</p>\n<p><strong>tl;dr: Should every game have a hook, a \"gimmick\", a unique twist? I don't think so.</strong></p>\n<hr>\n<p>To be fair, I want to discuss of something else:</p>\n<blockquote>\n<p>If you are unsure of the strength of your game's hooks, test them! With NecroDancer we did this by putting out a very early teaser trailer, and by demoing at PAX.</p>\n</blockquote>\n<p>\"Demoing at PAX\" is not something that everyone can afford. I'm all for the \"try your game in real as soon as possible\" mantra, but going to a big show is out of scope for almost any indie. It costs a lot just to present your game — and I don't even count the transportation, the food and hostels.</p>\n<p>When we went to Rezzed, we spent about £2000. It was close to us so the travel was very cheap.<sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup> Rezzed is also no PAX or Gamescon.</p>\n<p>With our finances, we can afford one or two big exhibitions a year, if we are lucky. I don't think we are the only one in this position. I even think that we are in a privileged situation compared to many indies.</p>\n<p>I don't want to fool myself: big shows are very important to get feedbacks, coverage and press. And this is something that many indies can't do at all. Languages, geography, finances — this is not an easy problem.</p>\n<p>And as Ryan tells us a little bit later:</p>\n<blockquote>\n<p>It is common these days for devs to downplay the importance of festivals, awards, and even of press. I disagree. Sure, accolades and reviews themselves may not drive mountains of sales, but most people need to hear about your game from numerous sources before they'll actually watch a trailer or buy the game.</p>\n</blockquote>\n<p>Exactly. :)</p>\n<p>To Ryan's credit, he's also ending his article with:</p>\n<blockquote>\n<p>I know how difficult it is to succeed as a new indie dev, and I am aware of the advantages that I have due to experience, connections, and reputation.</p>\n</blockquote>\n<p>Thanks for the tips, anyways!</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>Well, we do try a few novel ideas in Steredenn, so it's not a pure \"plain-old-game\". But the essence of the game is a direct action-packed game. That's our main focus.</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-2\">\n<p>France to England.</p>\n<a href=\"#fnref-2\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>"}},{"node":{"id":"28132748-6672-5171-b64e-a90fd69f4ca2","frontmatter":{"path":null,"title":"Quantum Post-Mortem","date":"2015-09-15","readableDate":"15 September 2015","redirectFrom":null,"excerpt":null,"excerptQuote":{"name":"Eric Zimmerman","quote":"My goal was that every card should feel incredibly powerful – a potential game winner in the right situation. I loved seeing my playtesters' faces grow greedy as they read the cards, astonished at how good the powers seemed to be."}},"fields":{"path":"/2015/09/quantum-post-mortem/","slug":"/2015/09/quantum-post-mortem/"},"html":"<p><a href=\"http://boardgamegeek.com/blogpost/24083/designer-diary-cruel-cruel-galaxy-or-designing-qua\">Fascinating post-mortem of Quantum, by its designer, Eric Zimmerman</a>:</p>\n<blockquote>\n<p>Quantum is a strategy game for two through four players that incorporates elements of tactics, resource management, and empire building. Players each begin the game with a small fleet of three starships on a customizable map built of modular tiles. Your goal is to expand by building Quantum Cubes on planets, along the way growing your fleet and evolving its abilities. […]</p>\n<p>Another element that opened up the possibilities of the game during this early prototyping period was the addition of special power cards. While I was working on it, I remember seeing a talk at the Game Developers Conference by Rob Pardo, one of the lead designers of World of Warcraft. According to Rob, one of the philosophies at his company Blizzard was to make the player feel overpowered. According to Rob, special abilities and power-ups should feel mighty and spectacular, rather than just being some kind of incremental stat improvement.</p>\n<p>As I started adding the advance cards to the game, I tried to have them embody this approach, especially when it came to the permanent card powers. My goal was that every card should feel incredibly powerful – a potential game winner in the right situation. I loved seeing my playtesters' faces grow greedy as they read the cards, astonished at how good the powers seemed to be.</p>\n<p>The challenge of powerful cards, of course, is balancing them. […]</p>\n<p>Designing the right mix of cards came down to good old-fashioned balancing and testing. There are a number of heuristics I tried to use in designing the cards to be balanced. For example, no card simply gives players an extra fourth action each turn; instead, some cards give you an extra action, but that action is limited, such as a free move that is only one space. There are also cards that do give you a completely open-ended extra action, but only if certain conditions are met, such as if you have more ships on the map than any other player. […]</p>\n<p> It seemed hopeless; I had designed a game with a combat system that no one wanted to use! The solution to this problem was to directly link combat to winning the game. […]</p>\n<p>One strong focus of our work was the language of Quantum: the terms in the rules, the names of the cards and units, and the other words we used in the game. In early prototypes, the titles of the advance cards were more technological: \"Ferocious\", the card that gives you a combat bonus, was originally called \"Armor\", while \"Energetic\", which gives you a movement bonus, was titled \"Propulsion\".</p>\n<p>The names of the card were clear, but they felt generic. Thinking about how to emphasize the player-as-commander, I changed the names from nouns to adjectives. Rather than describing the player's fleet, the cards now described the player. Instead of \"Fuel\", \"Evasion\", and \"Engineering\", the cards now had names like \"Brilliant\", \"Cruel\", and \"Stubborn\".</p>\n</blockquote>\n<p><a href=\"http://www.funforge.fr/US/?portfolio=quantum\">Quantum</a> is one of the best boardgames I recently played. It was unavailable for a year but I finally got my hand on the re-edition. The post-mortem shows all the history behind the game and how some concepts were found and implemented.</p>\n<p>The game is really fast, complex and deep. There's a bit of chance in the game through the roll of the dices (<em>obviously</em>), but I don't think it matters that much in the end. Your decisions are way more important than your luck.</p>"}},{"node":{"id":"c65c4fa2-cf05-5a05-8925-466fd5f3f66f","frontmatter":{"path":null,"title":"The Rule of Two","date":"2015-09-09","readableDate":"09 September 2015","redirectFrom":null,"excerpt":null,"excerptQuote":{"name":"CGP Grey","quote":"The rule of two is that two is one — and one is none."}},"fields":{"path":"/2015/09/rule-of-two/","slug":"/2015/09/rule-of-two/"},"html":"<p><a href=\"http://www.relay.fm/cortex/12\">CGP Grey</a>:</p>\n<blockquote class=\"transcript\">\n<p>The rule of two is that <strong>two is one — and one is none.</strong> This is applicable to so many things in your life. As a starting point, I often like to think of the rule of two with things that you have around the house. So, for example, if you have one roll of toilet paper, you really don't have any toilet paper. Because when that one runs out, you're in trouble. So you really need two rolls of toilet paper at all time. It's a redundancy rule, basically. It's where this comes from. […]</p>\n<p>This is one of my little pieces of advice for trying to run a life very smoothly. It's that, everything that you can possibly have two of, you should have it. Two shampoo bottles, two bottles of vitamins, two boxes of cereal, two cartons of eggs. You want duplicates of everything. And then, when you're down to one of those things, that's the sign that you need to buy the next one. In this way, you are never out, you're never out of anything. […]</p>\n<p>It's applicable to everything in your whole life, everything that's important.</p>\n</blockquote>\n<p><small>(Emphasis mine)</small></p>\n<p>This is so spot on. I try to function like that, but I never put words onto this behavior. Here it is.</p>\n<p>Grey continues:</p>\n<blockquote class=\"transcript\">\n<p>Think this way with computer files: you have only one copy of that file, guess what? You have no copy of this file. I even think it's applicable to work. If you have one source of income, in many ways, it's like you have no source of income. Because if something happens with your main job, you are in lots and lots of trouble. One source of income, no source of income.</p>\n</blockquote>"}},{"node":{"id":"4374b74e-c14a-519f-a6a9-1a2e46c02d68","frontmatter":{"path":null,"title":"The New Rumored Apple TV — a Gaming Console?","date":"2015-09-03","readableDate":"03 September 2015","redirectFrom":null,"excerpt":null,"excerptQuote":{"name":"Myke Hurley","quote":"If they do not show a first party gaming focused controller for the new Apple TV, I think that they are not as committed to games as they might think."}},"fields":{"path":"/2015/09/quote-myke-hurley-atv-console/","slug":"/2015/09/quote-myke-hurley-atv-console/"},"html":"<p><a href=\"https://overcast.fm/+CHZ-L5Yhc/1:04:59\">Myke Hurley</a>:</p>\n<blockquote class=\"transcript\">\n<p>If [Apple] do not show a first party gaming focused controller [for the new rumored Apple TV], I think that they are not as committed to games as they might think. […]</p>\n<p>And it needs to be a controller with buttons on it.</p>\n</blockquote>\n<p>Exactly my thought.</p>\n<p><a href=\"http://steredenn.pixelnest.io\">Steredenn</a> would be cool on the alleged Apple TV… but without a dedicated controller, it's a no go.</p>"}},{"node":{"id":"e11cdde9-7c7a-51e1-b397-d7b8d7bc6694","frontmatter":{"path":null,"title":"Dead or Finished Libraries?","date":"2015-08-21","readableDate":"21 August 2015","redirectFrom":null,"excerpt":null,"excerptQuote":{"name":"Mark Jason Dominus","quote":"People seem to think that all software requires new features or frequent bug fixes. Apparently, the idea of software that doesn't get updated because it's finished is inconceivable."}},"fields":{"path":"/2015/08/dead-or-finished-libraries/","slug":"/2015/08/dead-or-finished-libraries/"},"html":"<p><a href=\"http://perl.plover.com/yak/12views/samples/notes.html\">Twelve Views of Mark Jason Dominus</a>:</p>\n<blockquote>\n<p>I released the Text::Template module several years ago, and it was immediately very successful. It's small, simple, fast, and it does a lot of things well. At the time, there were not yet 29 templating systems available on CPAN.</p>\n<p>Anyway, the module quickly stabilized. I would get bug reports, and they would turn out to be bugs in the module's users, not in the module; I would get feature requests, and usually it turned out that what the requester wanted was possible, or even easy, without any changes to the module. Since the module was perfect, there was no need to upload new versions of it to CPAN.</p>\n<p>But then I started to get disturbing emails. \"Hi, I notice you have not updated Text::Template for nine months. Are you still maintaining it?\" \"Hi, I notice you seem to have stopped work on Text::Template. Have you decided to abandon this approach?\" \"Hi, I was thinking of using Text::Template, but I saw it wasn't being maintained any more, so I decided to use Junk::CrappyTemplate, because I need wanted to be sure of getting support for it.\"</p>\n<p>I started wondering if maybe the thing to do was to release a new version of Text::Template every month, with no changes, but with an incremented version number. Of course, that's ridiculous. But it seems that people assume that if you don't update the module every month, it must be dead. People seem to think that all software requires new features or frequent bug fixes. Apparently, the idea of software that doesn't get updated because it's finished is inconceivable.</p>\n<p>I blame Microsoft.</p>\n</blockquote>\n<p>I must confess that I tend to look at the date of the last commit when I choose a library over another (along with other metrics, hopefully).</p>\n<p>Well, I also think that a \"perfect library\" might not exist, but the author is making a really good point in his talk.</p>\n<p>(via <a href=\"http://www.drmaciver.com/2015/08/what-if-we-had-more-finished-libraries/\">What if we had more finished libraries?</a>)</p>"}},{"node":{"id":"7b4ffb82-801c-5ff8-b065-f6f220aa5d23","frontmatter":{"path":null,"title":"The Web, the Ads and the Ad-Blockers","date":"2015-06-11","readableDate":"11 June 2015","redirectFrom":null,"excerpt":null,"excerptQuote":null},"fields":{"path":"/2015/06/ads/","slug":"/2015/06/ads/"},"html":"<p>Like almost everyone else, I don't like ads. Nevertheless, I don't use an ad-blocker either.</p>\n<p>Using the web and using an ad-blocker is hypocrite. Like it or not, it's the most widely used business model on the web. That's how most people get paid for the content you read, watch and listen <strong>for free</strong>.</p>\n<p>There're other ways to do it (affiliate links, feed sponsorships, paywalls, etc.), but the dominant model today is ads.</p>\n<p>You know what? I don't find ads particularly irritating from now on. Why? Because I find and read honest websites that respect me by not throwing huge walls of ads to my face. I avoid those ad-filled websites, because most of the time, they are simply bad. And for YouTube? I patiently wait because the great contents made there that I want to see deserve to be paid.<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup></p>\n<p>The solution is not ad-blocking. The solution is to find well-made contents which focus on the readership, not the publisher.<sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup></p>\n<hr>\n<p>Let me finish with <a href=\"https://news.ycombinator.com/item?id=9695552\">this</a>:</p>\n<blockquote>\n<p>There is a huge irony in that fact that AdBlock's function of keeping ads away from our content will eventually do the opposite. The alternative to ads alongside my content is ads inside my content.</p>\n<p>Let's face it: paywalls don't work. The alternative on the horizon is native advertising. Buzzfeed is now famously refusing to host ads. Instead they sustain themselves by publishing content that subtly supports the agenda of any company with deep enough pockets to pay for it. A viewer's ability to distinguish between native ads and regular articles is small and quickly vanishing. If separate ads stop reaching people, the path to monetization remaining is to change your content to reflect someone else's agenda.</p>\n</blockquote>\n<p>Because you cannot distinguish an ad from an article, it's even more insidious and dishonest. And this time, you won't be able to block it.</p>\n<hr>\n<h2>Update <span class=\"more\">08 June 2018</span></h2>\n<p>My view on this has changed quite a bit recently. With the explosion of ad tracking technologies and the bloat they add to any webpage, I <em>do use</em> an ad blocker now. But only with Safari, where I find it safe to use an extension like that thanks to its \"Content Blocker\" model of security (ie., no access to the page content, just many rules that match the webpage without a way to send data back).</p>\n<p>I have absolutely no trust in a company like AdBlock, and I am not willing to give them my data so easily.</p>\n<p>I do, however, unblock some specific sites. It's a shame, though.</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>Ads in apps? I pay to remove them when I can or I find better paid alternatives.</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-2\">\n<p>And if you really want to use AdBlock, <em>only block abusive websites</em>.</p>\n<a href=\"#fnref-2\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>"}},{"node":{"id":"7a6ccfff-adb1-568b-a6f6-416c159ede17","frontmatter":{"path":null,"title":"Force Touch Affordance","date":"2015-06-08","readableDate":"08 June 2015","redirectFrom":null,"excerpt":"Force Touch is not discoverable.","excerptQuote":null},"fields":{"path":"/2015/06/force-touch/","slug":"/2015/06/force-touch/"},"html":"<p><a href=\"https://www.apple.com/watch/technology/#sensitive\">Force Touch</a> is an impressive piece of technology. It currently equips the Apple Watch and the new Macbooks. You press firmly on the screen and the haptic engine will register a \"deep\" press.</p>\n<p>On the Watch, I found that the feedback was not properly mapped to the press (it's a tap on your wrist, not on your finger). I didn't use the Watch a lot, but I've also found that it was sometime hard to trigger.</p>\n<p>On the new Macbooks' trackpad, the feeling is fantastic. You can push multiple times and sense the force you apply like it's real. You may not even understand that it's not a true physical button.</p>\n<p>But… <strong>Force Touch is not discoverable.</strong></p>\n<p>There is no visual clue that Force Touch is available — either on the screen or on a specific control. It's like the menu button of the old Android versions: you tap somewhere (the menu button on Android, firmly with Force Touch) and something may happen. Or not. It's confusing and it's one more hidden gesture with no affordance. It's no better than a long press if its sole purpose is to be another context menu.</p>\n<p>Indeed, on the Apple Watch, Force Touch's goal is to show a secret menu with additional actions. I understand the purpose — the screen is small and you can't fit everything on the screen. But this exact same behavior on a bigger display will have the same problem that Android had with its menu button. It's even worse than a hamburger menu, because the icon won't be there to tell you that an additional layer is present.</p>\n<p>On OS X, I found that the usage of Force Touch is better: it's not a way to show secondary actions, but just a \"deeper version\" of an action. In QuickTime, for example, you press firmly on the forward button and the video will fast forward faster for each level you reach. It's still hard to know when it's available and might result in nothing, but at least, it's consistant with its source.</p>"}}],"pathPrefix":"articles","first":false,"last":false,"index":4,"pageCount":11,"additionalContext":{}}}}