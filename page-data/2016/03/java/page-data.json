{"componentChunkName":"component---src-components-templates-post-template-js","path":"/2016/03/java/","webpackCompilationHash":"70443a68042ed8835eaa","result":{"data":{"site":{"siteMetadata":{"title":"Matthieu Oger","author":"Matthieu Oger","description":"I am a product manager, developer and designer from France. Co-founder of Pixelnest Studio.","siteUrl":"https://matthieuoger.com"}},"markdownRemark":{"html":"<p><a href=\"https://www.quora.com/Why-do-many-software-engineers-not-like-Java/answer/Michael-O-Church\">Michael O. Church</a>:</p>\n<blockquote>\n<p>First, let's cover the technical issues. It's verbose, combines the worst of both worlds between static and dynamic typing by having a hobbled but extremely clunky type system, and mandates running on a virtual machine (VM) that has a macroscopic startup time (not an issue for long-running servers, but painful for command-line applications). […]</p>\n<p>The VM itself has a lot to recommend it. It offers concurrency and garbage collection at a level of quality that, until recently, wasn't found anywhere else. […] Much important software in the early 2000s was written in Java because, at the time, it was the best choice, even taking the mediocrity of the language itself into account. It had Unicode (albeit, UTF-16) from the start and a strong concurrency story, and it was a notch above C++ in terms of user experience. […]</p>\n<p>If you put Java on a technical trial, it doesn't do so bad. The <em>language</em> sucks, the platform is pretty good for most purposes. I do hate the dominant interpretation of \"object-oriented programming\" with a passion, because it objectively sucks. […]</p>\n<p>So let's talk about the political and cultural issues. First, the dominant Java culture is one of mediocrity and bad taste, with MetaModelVibratorVisitorFactory classes dominating. I've heard a number of experts on \"the Java issue\" argue that Java's biggest problem is the community, and that comes directly from the fact that good programmers don't want to deal with the bastardization of OOP that has entrenched itself in mainstream corporate development. You have a lot of people who trained up as \"Java programmers\", haven't seen a command line ever, and have no clue how the computer actually works. Most of them have never actually written a program; they just write classes and some Senior Chief Architect (who makes $246,001 per year and hasn't written a line of code since the 1990s) figures out how to stitch them together, and then tells some other clueless junior how to implement the glue in the gutshot hope that one will actually have the talent to make an actual working program out of the mess.</p>\n<p>This isn't inherent to the JVM, because Clojure (currently hosted on the JVM, although its endgame seems to be language-agnosticism) has a radically different (and better) community. Scala's community is more mixed, but the top Scala engineers (the ones making tools like Spark and Kestrel) are really fucking good.</p>\n<p>[…]</p>\n<p>So, the short answer is: it's mostly not about the underlying platform (which is generally of high quality) and its only partly about the language (which is mediocre but can't be blamed directly for community problems). It goes a lot deeper than that, and not all of it is Java's fault. However, Java takes its share of the blame for its clear favoritism toward large programs (technically, established by its long startup time) and by its support of a very ugly (and counterproductive) variety of object-oriented programming.</p>\n</blockquote>\n<p><a href=\"https://www.quora.com/Why-do-many-software-engineers-not-like-Java/answer/Stanley-Idesis\">Stanley Idesis</a>:</p>\n<blockquote>\n<p>I’ve read the popular answers and will claim no contest to a majority of the complaints I found. […] However, here’s why I <em>love</em> it. […]</p>\n<p>In the Android world, developers use Java because they <em>have</em> to. However, much creativity has sprung from that limitation. People have written many excellent OS libraries in Java for Android. The platform continues to be a hotbed of Java activity which developers contribute to from all over the world. […]</p>\n<p>Android’s open nature, wide distribution, and powerful support from Google are almost enough to make Java hip again. […] Sure, some may argue that other runtimes and languages can enable the same capabilities of the device, but for whatever reason, Android chose Java.</p>\n<p>Until Google changes its mind, Java will remain relevant and the source of fascinating developments in the software community as long as Android remains popular.</p>\n</blockquote>","frontmatter":{"date":"2016-03-17","readableDate":"17 March 2016","title":"Why Do Many Software Engineers Hate Java?","showPageTitle":null,"excerptLine":null,"excerptQuote":null},"fields":{"path":"/2016/03/java/"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"f5ad4af0-93bd-51c6-9f39-817dd43734a0"}}}